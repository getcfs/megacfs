// Code generated by protoc-gen-go.
// source: cmdctrlsvc.proto
// DO NOT EDIT!

/*
Package cmdctrlsvc is a generated protocol buffer package.

It is generated from these files:
	cmdctrlsvc.proto

It has these top-level messages:
	RingUpdateResult
	StatsMsg
	EmptyMsg
	StatusMsg
	Ring
	HealthCheckMsg
	SelfUpgradeMsg
	SoftwareVersionMsg
*/
package cmdctrlsvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RingUpdateResult struct {
	Newversion int64 `protobuf:"varint,1,opt,name=newversion" json:"newversion,omitempty"`
}

func (m *RingUpdateResult) Reset()                    { *m = RingUpdateResult{} }
func (m *RingUpdateResult) String() string            { return proto.CompactTextString(m) }
func (*RingUpdateResult) ProtoMessage()               {}
func (*RingUpdateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatsMsg struct {
	Statsjson []byte `protobuf:"bytes,1,opt,name=statsjson,proto3" json:"statsjson,omitempty"`
}

func (m *StatsMsg) Reset()                    { *m = StatsMsg{} }
func (m *StatsMsg) String() string            { return proto.CompactTextString(m) }
func (*StatsMsg) ProtoMessage()               {}
func (*StatsMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StatusMsg struct {
	Status bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *StatusMsg) Reset()                    { *m = StatusMsg{} }
func (m *StatusMsg) String() string            { return proto.CompactTextString(m) }
func (*StatusMsg) ProtoMessage()               {}
func (*StatusMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Ring struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring    []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (m *Ring) Reset()                    { *m = Ring{} }
func (m *Ring) String() string            { return proto.CompactTextString(m) }
func (*Ring) ProtoMessage()               {}
func (*Ring) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type HealthCheckMsg struct {
	Status bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Ts     int64  `protobuf:"varint,3,opt,name=ts" json:"ts,omitempty"`
}

func (m *HealthCheckMsg) Reset()                    { *m = HealthCheckMsg{} }
func (m *HealthCheckMsg) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckMsg) ProtoMessage()               {}
func (*HealthCheckMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SelfUpgradeMsg struct {
	Version  string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Bindiff  []byte `protobuf:"bytes,2,opt,name=bindiff,proto3" json:"bindiff,omitempty"`
	Checksum []byte `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *SelfUpgradeMsg) Reset()                    { *m = SelfUpgradeMsg{} }
func (m *SelfUpgradeMsg) String() string            { return proto.CompactTextString(m) }
func (*SelfUpgradeMsg) ProtoMessage()               {}
func (*SelfUpgradeMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SoftwareVersionMsg struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *SoftwareVersionMsg) Reset()                    { *m = SoftwareVersionMsg{} }
func (m *SoftwareVersionMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwareVersionMsg) ProtoMessage()               {}
func (*SoftwareVersionMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*RingUpdateResult)(nil), "cmdctrlsvc.RingUpdateResult")
	proto.RegisterType((*StatsMsg)(nil), "cmdctrlsvc.StatsMsg")
	proto.RegisterType((*EmptyMsg)(nil), "cmdctrlsvc.EmptyMsg")
	proto.RegisterType((*StatusMsg)(nil), "cmdctrlsvc.StatusMsg")
	proto.RegisterType((*Ring)(nil), "cmdctrlsvc.Ring")
	proto.RegisterType((*HealthCheckMsg)(nil), "cmdctrlsvc.HealthCheckMsg")
	proto.RegisterType((*SelfUpgradeMsg)(nil), "cmdctrlsvc.SelfUpgradeMsg")
	proto.RegisterType((*SoftwareVersionMsg)(nil), "cmdctrlsvc.SoftwareVersionMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CmdCtrl service

type CmdCtrlClient interface {
	RingUpdate(ctx context.Context, in *Ring, opts ...grpc.CallOption) (*RingUpdateResult, error)
	Reload(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Restart(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Start(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Stop(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Exit(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Stats(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatsMsg, error)
	HealthCheck(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*HealthCheckMsg, error)
	SelfUpgrade(ctx context.Context, in *SelfUpgradeMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	SoftwareVersion(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*SoftwareVersionMsg, error)
}

type cmdCtrlClient struct {
	cc *grpc.ClientConn
}

func NewCmdCtrlClient(cc *grpc.ClientConn) CmdCtrlClient {
	return &cmdCtrlClient{cc}
}

func (c *cmdCtrlClient) RingUpdate(ctx context.Context, in *Ring, opts ...grpc.CallOption) (*RingUpdateResult, error) {
	out := new(RingUpdateResult)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/RingUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Reload(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/Reload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Restart(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/Restart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Start(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Stop(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Exit(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/Exit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Stats(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatsMsg, error) {
	out := new(StatsMsg)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) HealthCheck(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*HealthCheckMsg, error) {
	out := new(HealthCheckMsg)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) SelfUpgrade(ctx context.Context, in *SelfUpgradeMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/SelfUpgrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) SoftwareVersion(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*SoftwareVersionMsg, error) {
	out := new(SoftwareVersionMsg)
	err := grpc.Invoke(ctx, "/cmdctrlsvc.CmdCtrl/SoftwareVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CmdCtrl service

type CmdCtrlServer interface {
	RingUpdate(context.Context, *Ring) (*RingUpdateResult, error)
	Reload(context.Context, *EmptyMsg) (*StatusMsg, error)
	Restart(context.Context, *EmptyMsg) (*StatusMsg, error)
	Start(context.Context, *EmptyMsg) (*StatusMsg, error)
	Stop(context.Context, *EmptyMsg) (*StatusMsg, error)
	Exit(context.Context, *EmptyMsg) (*StatusMsg, error)
	Stats(context.Context, *EmptyMsg) (*StatsMsg, error)
	HealthCheck(context.Context, *EmptyMsg) (*HealthCheckMsg, error)
	SelfUpgrade(context.Context, *SelfUpgradeMsg) (*StatusMsg, error)
	SoftwareVersion(context.Context, *EmptyMsg) (*SoftwareVersionMsg, error)
}

func RegisterCmdCtrlServer(s *grpc.Server, srv CmdCtrlServer) {
	s.RegisterService(&_CmdCtrl_serviceDesc, srv)
}

func _CmdCtrl_RingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ring)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).RingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/RingUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).RingUpdate(ctx, req.(*Ring))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdCtrl_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).Reload(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdCtrl_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).Restart(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdCtrl_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).Start(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdCtrl_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).Stop(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdCtrl_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).Exit(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdCtrl_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).Stats(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdCtrl_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).HealthCheck(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdCtrl_SelfUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfUpgradeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).SelfUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/SelfUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).SelfUpgrade(ctx, req.(*SelfUpgradeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdCtrl_SoftwareVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdCtrlServer).SoftwareVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdctrlsvc.CmdCtrl/SoftwareVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdCtrlServer).SoftwareVersion(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmdCtrl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cmdctrlsvc.CmdCtrl",
	HandlerType: (*CmdCtrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RingUpdate",
			Handler:    _CmdCtrl_RingUpdate_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _CmdCtrl_Reload_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _CmdCtrl_Restart_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _CmdCtrl_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _CmdCtrl_Stop_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _CmdCtrl_Exit_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _CmdCtrl_Stats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _CmdCtrl_HealthCheck_Handler,
		},
		{
			MethodName: "SelfUpgrade",
			Handler:    _CmdCtrl_SelfUpgrade_Handler,
		},
		{
			MethodName: "SoftwareVersion",
			Handler:    _CmdCtrl_SoftwareVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("cmdctrlsvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x4b, 0x4f, 0xea, 0x40,
	0x14, 0xe6, 0x51, 0xa0, 0x3d, 0x34, 0xd0, 0x3b, 0xe1, 0x26, 0x84, 0xdc, 0x7b, 0x73, 0x33, 0x89,
	0x86, 0x15, 0x0b, 0x8d, 0xaf, 0x8d, 0x89, 0x22, 0x89, 0x2e, 0xdc, 0xd0, 0xe0, 0xbe, 0xb4, 0xd3,
	0x52, 0xed, 0x2b, 0x9d, 0x01, 0xf4, 0x37, 0xfb, 0x27, 0x9c, 0x0e, 0x28, 0xd3, 0x6a, 0x63, 0x64,
	0xd7, 0xf9, 0xe6, 0x7b, 0x9c, 0x9c, 0xf9, 0x0a, 0x86, 0x1d, 0x3a, 0x36, 0x4b, 0x03, 0xba, 0xb2,
	0x47, 0x49, 0x1a, 0xb3, 0x18, 0xc1, 0x0e, 0xc1, 0x87, 0x60, 0x4c, 0xfd, 0xc8, 0x9b, 0x25, 0x8e,
	0xc5, 0xc8, 0x94, 0xd0, 0x65, 0xc0, 0x10, 0x02, 0x88, 0xc8, 0x7a, 0x45, 0x52, 0xea, 0xc7, 0x51,
	0xbf, 0xfa, 0xbf, 0x3a, 0xac, 0xe3, 0xbf, 0xa0, 0x9a, 0xcc, 0x62, 0xf4, 0x9e, 0x7a, 0xe8, 0x17,
	0x68, 0x34, 0xfb, 0x7e, 0xa4, 0xdb, 0x6b, 0x1d, 0x03, 0xa8, 0x93, 0x30, 0x61, 0x2f, 0xfc, 0x1a,
	0x0f, 0x41, 0xcb, 0xa8, 0x4b, 0xc1, 0xed, 0x40, 0x93, 0x8a, 0x83, 0x20, 0xaa, 0xa8, 0x0d, 0xf5,
	0x90, 0x7a, 0xfd, 0x1a, 0x3f, 0x68, 0xf8, 0x00, 0x94, 0x2c, 0x1c, 0x75, 0xa1, 0x95, 0x4b, 0x43,
	0x3a, 0x28, 0x29, 0xbf, 0x10, 0x34, 0x1d, 0x5f, 0x40, 0xe7, 0x96, 0x58, 0x01, 0x5b, 0x8c, 0x17,
	0xc4, 0x7e, 0xfa, 0xce, 0x95, 0x4f, 0x5f, 0x63, 0xb4, 0x5f, 0x17, 0x63, 0xdf, 0x40, 0xc7, 0x24,
	0x81, 0x3b, 0x4b, 0xbc, 0xd4, 0x72, 0x48, 0x26, 0x2d, 0x64, 0x69, 0x19, 0x30, 0xf7, 0x23, 0xc7,
	0x77, 0xdd, 0x4d, 0x1c, 0x32, 0x40, 0xb5, 0xb3, 0x20, 0xba, 0x0c, 0x85, 0x8b, 0xce, 0xe7, 0x44,
	0x66, 0xec, 0xb2, 0xb5, 0x95, 0x92, 0x87, 0x8d, 0xf6, 0x2b, 0xa7, 0xa3, 0x57, 0x05, 0x5a, 0xe3,
	0xd0, 0x19, 0xf3, 0xd5, 0xa2, 0x4b, 0x80, 0xdd, 0x5e, 0x91, 0x31, 0x92, 0x1e, 0x21, 0xc3, 0x07,
	0x7f, 0x8a, 0x88, 0xfc, 0x02, 0xb8, 0x82, 0xce, 0xa0, 0x39, 0x25, 0x41, 0x6c, 0x39, 0xa8, 0x27,
	0x33, 0xdf, 0x97, 0x3c, 0xf8, 0x2d, 0xa3, 0x1f, 0xeb, 0xe6, 0xc2, 0x73, 0x68, 0x71, 0x13, 0x66,
	0xa5, 0xec, 0xa7, 0xca, 0x53, 0x68, 0x98, 0xfb, 0xe8, 0x4e, 0x40, 0x31, 0x59, 0x9c, 0xec, 0x21,
	0x9b, 0x3c, 0xfb, 0x7b, 0xa4, 0x35, 0x44, 0x11, 0x4b, 0x74, 0xbd, 0xa2, 0x6e, 0x2b, 0xbb, 0x82,
	0xb6, 0xd4, 0xa1, 0x12, 0xf1, 0x40, 0x46, 0xf3, 0x95, 0xe3, 0x16, 0xd7, 0xd0, 0x96, 0xba, 0x84,
	0x72, 0xe4, 0x7c, 0xc9, 0xca, 0xa7, 0xbf, 0x83, 0x6e, 0xa1, 0x49, 0x25, 0xa3, 0xfc, 0xcb, 0x39,
	0x7c, 0x2a, 0x1f, 0xae, 0xcc, 0x9b, 0xe2, 0x67, 0x3e, 0x7e, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x30,
	0xcf, 0x28, 0x6b, 0xe0, 0x03, 0x00, 0x00,
}
