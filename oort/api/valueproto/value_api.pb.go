// Code generated by protoc-gen-gogo.
// source: value_api.proto
// DO NOT EDIT!

/*
	Package valueproto is a generated protocol buffer package.

	It is generated from these files:
		value_api.proto

	It has these top-level messages:
		EmptyMsg
		WriteRequest
		LookupRequest
		ReadRequest
		DeleteRequest
		WriteResponse
		LookupResponse
		ReadResponse
		DeleteResponse
*/
package valueproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptorValueApi, []int{0} }

type WriteRequest struct {
	Rpcid          uint32 `protobuf:"varint,1,opt,name=rpcid,proto3" json:"rpcid,omitempty"`
	KeyA           uint64 `protobuf:"varint,2,opt,name=keyA,proto3" json:"keyA,omitempty"`
	KeyB           uint64 `protobuf:"varint,3,opt,name=keyB,proto3" json:"keyB,omitempty"`
	Value          []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	TimestampMicro int64  `protobuf:"varint,5,opt,name=timestampMicro,proto3" json:"timestampMicro,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptorValueApi, []int{1} }

type LookupRequest struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid,proto3" json:"rpcid,omitempty"`
	KeyA  uint64 `protobuf:"varint,2,opt,name=keyA,proto3" json:"keyA,omitempty"`
	KeyB  uint64 `protobuf:"varint,3,opt,name=keyB,proto3" json:"keyB,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptorValueApi, []int{2} }

type ReadRequest struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid,proto3" json:"rpcid,omitempty"`
	KeyA  uint64 `protobuf:"varint,2,opt,name=keyA,proto3" json:"keyA,omitempty"`
	KeyB  uint64 `protobuf:"varint,3,opt,name=keyB,proto3" json:"keyB,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorValueApi, []int{3} }

type DeleteRequest struct {
	Rpcid          uint32 `protobuf:"varint,1,opt,name=rpcid,proto3" json:"rpcid,omitempty"`
	KeyA           uint64 `protobuf:"varint,2,opt,name=keyA,proto3" json:"keyA,omitempty"`
	KeyB           uint64 `protobuf:"varint,3,opt,name=keyB,proto3" json:"keyB,omitempty"`
	TimestampMicro int64  `protobuf:"varint,4,opt,name=timestampMicro,proto3" json:"timestampMicro,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorValueApi, []int{4} }

type WriteResponse struct {
	Rpcid          uint32 `protobuf:"varint,1,opt,name=rpcid,proto3" json:"rpcid,omitempty"`
	TimestampMicro int64  `protobuf:"varint,2,opt,name=timestampMicro,proto3" json:"timestampMicro,omitempty"`
	Err            string `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptorValueApi, []int{5} }

type LookupResponse struct {
	Rpcid          uint32 `protobuf:"varint,1,opt,name=rpcid,proto3" json:"rpcid,omitempty"`
	TimestampMicro int64  `protobuf:"varint,2,opt,name=timestampMicro,proto3" json:"timestampMicro,omitempty"`
	Length         uint32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Err            string `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptorValueApi, []int{6} }

type ReadResponse struct {
	Rpcid          uint32 `protobuf:"varint,1,opt,name=rpcid,proto3" json:"rpcid,omitempty"`
	TimestampMicro int64  `protobuf:"varint,2,opt,name=timestampMicro,proto3" json:"timestampMicro,omitempty"`
	Value          []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Err            string `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptorValueApi, []int{7} }

type DeleteResponse struct {
	Rpcid          uint32 `protobuf:"varint,1,opt,name=rpcid,proto3" json:"rpcid,omitempty"`
	TimestampMicro int64  `protobuf:"varint,2,opt,name=timestampMicro,proto3" json:"timestampMicro,omitempty"`
	Err            string `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorValueApi, []int{8} }

func init() {
	proto.RegisterType((*EmptyMsg)(nil), "valueproto.EmptyMsg")
	proto.RegisterType((*WriteRequest)(nil), "valueproto.WriteRequest")
	proto.RegisterType((*LookupRequest)(nil), "valueproto.LookupRequest")
	proto.RegisterType((*ReadRequest)(nil), "valueproto.ReadRequest")
	proto.RegisterType((*DeleteRequest)(nil), "valueproto.DeleteRequest")
	proto.RegisterType((*WriteResponse)(nil), "valueproto.WriteResponse")
	proto.RegisterType((*LookupResponse)(nil), "valueproto.LookupResponse")
	proto.RegisterType((*ReadResponse)(nil), "valueproto.ReadResponse")
	proto.RegisterType((*DeleteResponse)(nil), "valueproto.DeleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ValueStore service

type ValueStoreClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	StreamWrite(ctx context.Context, opts ...grpc.CallOption) (ValueStore_StreamWriteClient, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	StreamLookup(ctx context.Context, opts ...grpc.CallOption) (ValueStore_StreamLookupClient, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	StreamRead(ctx context.Context, opts ...grpc.CallOption) (ValueStore_StreamReadClient, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	StreamDelete(ctx context.Context, opts ...grpc.CallOption) (ValueStore_StreamDeleteClient, error)
}

type valueStoreClient struct {
	cc *grpc.ClientConn
}

func NewValueStoreClient(cc *grpc.ClientConn) ValueStoreClient {
	return &valueStoreClient{cc}
}

func (c *valueStoreClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/valueproto.ValueStore/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valueStoreClient) StreamWrite(ctx context.Context, opts ...grpc.CallOption) (ValueStore_StreamWriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ValueStore_serviceDesc.Streams[0], c.cc, "/valueproto.ValueStore/StreamWrite", opts...)
	if err != nil {
		return nil, err
	}
	x := &valueStoreStreamWriteClient{stream}
	return x, nil
}

type ValueStore_StreamWriteClient interface {
	Send(*WriteRequest) error
	Recv() (*WriteResponse, error)
	grpc.ClientStream
}

type valueStoreStreamWriteClient struct {
	grpc.ClientStream
}

func (x *valueStoreStreamWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *valueStoreStreamWriteClient) Recv() (*WriteResponse, error) {
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *valueStoreClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/valueproto.ValueStore/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valueStoreClient) StreamLookup(ctx context.Context, opts ...grpc.CallOption) (ValueStore_StreamLookupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ValueStore_serviceDesc.Streams[1], c.cc, "/valueproto.ValueStore/StreamLookup", opts...)
	if err != nil {
		return nil, err
	}
	x := &valueStoreStreamLookupClient{stream}
	return x, nil
}

type ValueStore_StreamLookupClient interface {
	Send(*LookupRequest) error
	Recv() (*LookupResponse, error)
	grpc.ClientStream
}

type valueStoreStreamLookupClient struct {
	grpc.ClientStream
}

func (x *valueStoreStreamLookupClient) Send(m *LookupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *valueStoreStreamLookupClient) Recv() (*LookupResponse, error) {
	m := new(LookupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *valueStoreClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/valueproto.ValueStore/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valueStoreClient) StreamRead(ctx context.Context, opts ...grpc.CallOption) (ValueStore_StreamReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ValueStore_serviceDesc.Streams[2], c.cc, "/valueproto.ValueStore/StreamRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &valueStoreStreamReadClient{stream}
	return x, nil
}

type ValueStore_StreamReadClient interface {
	Send(*ReadRequest) error
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type valueStoreStreamReadClient struct {
	grpc.ClientStream
}

func (x *valueStoreStreamReadClient) Send(m *ReadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *valueStoreStreamReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *valueStoreClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/valueproto.ValueStore/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valueStoreClient) StreamDelete(ctx context.Context, opts ...grpc.CallOption) (ValueStore_StreamDeleteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ValueStore_serviceDesc.Streams[3], c.cc, "/valueproto.ValueStore/StreamDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &valueStoreStreamDeleteClient{stream}
	return x, nil
}

type ValueStore_StreamDeleteClient interface {
	Send(*DeleteRequest) error
	Recv() (*DeleteResponse, error)
	grpc.ClientStream
}

type valueStoreStreamDeleteClient struct {
	grpc.ClientStream
}

func (x *valueStoreStreamDeleteClient) Send(m *DeleteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *valueStoreStreamDeleteClient) Recv() (*DeleteResponse, error) {
	m := new(DeleteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ValueStore service

type ValueStoreServer interface {
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	StreamWrite(ValueStore_StreamWriteServer) error
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	StreamLookup(ValueStore_StreamLookupServer) error
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	StreamRead(ValueStore_StreamReadServer) error
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	StreamDelete(ValueStore_StreamDeleteServer) error
}

func RegisterValueStoreServer(s *grpc.Server, srv ValueStoreServer) {
	s.RegisterService(&_ValueStore_serviceDesc, srv)
}

func _ValueStore_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValueStoreServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valueproto.ValueStore/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValueStoreServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValueStore_StreamWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValueStoreServer).StreamWrite(&valueStoreStreamWriteServer{stream})
}

type ValueStore_StreamWriteServer interface {
	Send(*WriteResponse) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type valueStoreStreamWriteServer struct {
	grpc.ServerStream
}

func (x *valueStoreStreamWriteServer) Send(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *valueStoreStreamWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValueStore_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValueStoreServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valueproto.ValueStore/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValueStoreServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValueStore_StreamLookup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValueStoreServer).StreamLookup(&valueStoreStreamLookupServer{stream})
}

type ValueStore_StreamLookupServer interface {
	Send(*LookupResponse) error
	Recv() (*LookupRequest, error)
	grpc.ServerStream
}

type valueStoreStreamLookupServer struct {
	grpc.ServerStream
}

func (x *valueStoreStreamLookupServer) Send(m *LookupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *valueStoreStreamLookupServer) Recv() (*LookupRequest, error) {
	m := new(LookupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValueStore_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValueStoreServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valueproto.ValueStore/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValueStoreServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValueStore_StreamRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValueStoreServer).StreamRead(&valueStoreStreamReadServer{stream})
}

type ValueStore_StreamReadServer interface {
	Send(*ReadResponse) error
	Recv() (*ReadRequest, error)
	grpc.ServerStream
}

type valueStoreStreamReadServer struct {
	grpc.ServerStream
}

func (x *valueStoreStreamReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *valueStoreStreamReadServer) Recv() (*ReadRequest, error) {
	m := new(ReadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValueStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValueStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valueproto.ValueStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValueStoreServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValueStore_StreamDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValueStoreServer).StreamDelete(&valueStoreStreamDeleteServer{stream})
}

type ValueStore_StreamDeleteServer interface {
	Send(*DeleteResponse) error
	Recv() (*DeleteRequest, error)
	grpc.ServerStream
}

type valueStoreStreamDeleteServer struct {
	grpc.ServerStream
}

func (x *valueStoreStreamDeleteServer) Send(m *DeleteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *valueStoreStreamDeleteServer) Recv() (*DeleteRequest, error) {
	m := new(DeleteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ValueStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "valueproto.ValueStore",
	HandlerType: (*ValueStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _ValueStore_Write_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _ValueStore_Lookup_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ValueStore_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ValueStore_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWrite",
			Handler:       _ValueStore_StreamWrite_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLookup",
			Handler:       _ValueStore_StreamLookup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamRead",
			Handler:       _ValueStore_StreamRead_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamDelete",
			Handler:       _ValueStore_StreamDelete_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptorValueApi,
}

func (m *EmptyMsg) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmptyMsg) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WriteRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *WriteRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpcid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintValueApi(data, i, uint64(m.Rpcid))
	}
	if m.KeyA != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintValueApi(data, i, uint64(m.KeyA))
	}
	if m.KeyB != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintValueApi(data, i, uint64(m.KeyB))
	}
	if len(m.Value) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintValueApi(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	if m.TimestampMicro != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintValueApi(data, i, uint64(m.TimestampMicro))
	}
	return i, nil
}

func (m *LookupRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpcid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintValueApi(data, i, uint64(m.Rpcid))
	}
	if m.KeyA != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintValueApi(data, i, uint64(m.KeyA))
	}
	if m.KeyB != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintValueApi(data, i, uint64(m.KeyB))
	}
	return i, nil
}

func (m *ReadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpcid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintValueApi(data, i, uint64(m.Rpcid))
	}
	if m.KeyA != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintValueApi(data, i, uint64(m.KeyA))
	}
	if m.KeyB != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintValueApi(data, i, uint64(m.KeyB))
	}
	return i, nil
}

func (m *DeleteRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpcid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintValueApi(data, i, uint64(m.Rpcid))
	}
	if m.KeyA != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintValueApi(data, i, uint64(m.KeyA))
	}
	if m.KeyB != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintValueApi(data, i, uint64(m.KeyB))
	}
	if m.TimestampMicro != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintValueApi(data, i, uint64(m.TimestampMicro))
	}
	return i, nil
}

func (m *WriteResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *WriteResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpcid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintValueApi(data, i, uint64(m.Rpcid))
	}
	if m.TimestampMicro != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintValueApi(data, i, uint64(m.TimestampMicro))
	}
	if len(m.Err) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintValueApi(data, i, uint64(len(m.Err)))
		i += copy(data[i:], m.Err)
	}
	return i, nil
}

func (m *LookupResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpcid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintValueApi(data, i, uint64(m.Rpcid))
	}
	if m.TimestampMicro != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintValueApi(data, i, uint64(m.TimestampMicro))
	}
	if m.Length != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintValueApi(data, i, uint64(m.Length))
	}
	if len(m.Err) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintValueApi(data, i, uint64(len(m.Err)))
		i += copy(data[i:], m.Err)
	}
	return i, nil
}

func (m *ReadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpcid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintValueApi(data, i, uint64(m.Rpcid))
	}
	if m.TimestampMicro != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintValueApi(data, i, uint64(m.TimestampMicro))
	}
	if len(m.Value) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintValueApi(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	if len(m.Err) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintValueApi(data, i, uint64(len(m.Err)))
		i += copy(data[i:], m.Err)
	}
	return i, nil
}

func (m *DeleteResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpcid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintValueApi(data, i, uint64(m.Rpcid))
	}
	if m.TimestampMicro != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintValueApi(data, i, uint64(m.TimestampMicro))
	}
	if len(m.Err) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintValueApi(data, i, uint64(len(m.Err)))
		i += copy(data[i:], m.Err)
	}
	return i, nil
}

func encodeFixed64ValueApi(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ValueApi(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintValueApi(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *EmptyMsg) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WriteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Rpcid != 0 {
		n += 1 + sovValueApi(uint64(m.Rpcid))
	}
	if m.KeyA != 0 {
		n += 1 + sovValueApi(uint64(m.KeyA))
	}
	if m.KeyB != 0 {
		n += 1 + sovValueApi(uint64(m.KeyB))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovValueApi(uint64(l))
	}
	if m.TimestampMicro != 0 {
		n += 1 + sovValueApi(uint64(m.TimestampMicro))
	}
	return n
}

func (m *LookupRequest) Size() (n int) {
	var l int
	_ = l
	if m.Rpcid != 0 {
		n += 1 + sovValueApi(uint64(m.Rpcid))
	}
	if m.KeyA != 0 {
		n += 1 + sovValueApi(uint64(m.KeyA))
	}
	if m.KeyB != 0 {
		n += 1 + sovValueApi(uint64(m.KeyB))
	}
	return n
}

func (m *ReadRequest) Size() (n int) {
	var l int
	_ = l
	if m.Rpcid != 0 {
		n += 1 + sovValueApi(uint64(m.Rpcid))
	}
	if m.KeyA != 0 {
		n += 1 + sovValueApi(uint64(m.KeyA))
	}
	if m.KeyB != 0 {
		n += 1 + sovValueApi(uint64(m.KeyB))
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Rpcid != 0 {
		n += 1 + sovValueApi(uint64(m.Rpcid))
	}
	if m.KeyA != 0 {
		n += 1 + sovValueApi(uint64(m.KeyA))
	}
	if m.KeyB != 0 {
		n += 1 + sovValueApi(uint64(m.KeyB))
	}
	if m.TimestampMicro != 0 {
		n += 1 + sovValueApi(uint64(m.TimestampMicro))
	}
	return n
}

func (m *WriteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Rpcid != 0 {
		n += 1 + sovValueApi(uint64(m.Rpcid))
	}
	if m.TimestampMicro != 0 {
		n += 1 + sovValueApi(uint64(m.TimestampMicro))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovValueApi(uint64(l))
	}
	return n
}

func (m *LookupResponse) Size() (n int) {
	var l int
	_ = l
	if m.Rpcid != 0 {
		n += 1 + sovValueApi(uint64(m.Rpcid))
	}
	if m.TimestampMicro != 0 {
		n += 1 + sovValueApi(uint64(m.TimestampMicro))
	}
	if m.Length != 0 {
		n += 1 + sovValueApi(uint64(m.Length))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovValueApi(uint64(l))
	}
	return n
}

func (m *ReadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Rpcid != 0 {
		n += 1 + sovValueApi(uint64(m.Rpcid))
	}
	if m.TimestampMicro != 0 {
		n += 1 + sovValueApi(uint64(m.TimestampMicro))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovValueApi(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovValueApi(uint64(l))
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Rpcid != 0 {
		n += 1 + sovValueApi(uint64(m.Rpcid))
	}
	if m.TimestampMicro != 0 {
		n += 1 + sovValueApi(uint64(m.TimestampMicro))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovValueApi(uint64(l))
	}
	return n
}

func sovValueApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozValueApi(x uint64) (n int) {
	return sovValueApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyMsg) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipValueApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValueApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcid", wireType)
			}
			m.Rpcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Rpcid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyA", wireType)
			}
			m.KeyA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.KeyA |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyB", wireType)
			}
			m.KeyB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.KeyB |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValueApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], data[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMicro", wireType)
			}
			m.TimestampMicro = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TimestampMicro |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValueApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValueApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcid", wireType)
			}
			m.Rpcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Rpcid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyA", wireType)
			}
			m.KeyA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.KeyA |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyB", wireType)
			}
			m.KeyB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.KeyB |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValueApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValueApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcid", wireType)
			}
			m.Rpcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Rpcid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyA", wireType)
			}
			m.KeyA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.KeyA |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyB", wireType)
			}
			m.KeyB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.KeyB |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValueApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValueApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcid", wireType)
			}
			m.Rpcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Rpcid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyA", wireType)
			}
			m.KeyA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.KeyA |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyB", wireType)
			}
			m.KeyB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.KeyB |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMicro", wireType)
			}
			m.TimestampMicro = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TimestampMicro |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValueApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValueApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcid", wireType)
			}
			m.Rpcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Rpcid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMicro", wireType)
			}
			m.TimestampMicro = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TimestampMicro |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValueApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValueApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcid", wireType)
			}
			m.Rpcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Rpcid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMicro", wireType)
			}
			m.TimestampMicro = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TimestampMicro |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Length |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValueApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValueApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcid", wireType)
			}
			m.Rpcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Rpcid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMicro", wireType)
			}
			m.TimestampMicro = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TimestampMicro |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValueApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], data[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValueApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValueApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcid", wireType)
			}
			m.Rpcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Rpcid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMicro", wireType)
			}
			m.TimestampMicro = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TimestampMicro |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValueApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValueApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValueApi(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValueApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValueApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthValueApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValueApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValueApi(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValueApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValueApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("value_api.proto", fileDescriptorValueApi) }

var fileDescriptorValueApi = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x6e, 0x9b, 0x40,
	0x14, 0xf6, 0x18, 0x6c, 0xb5, 0xcf, 0xe0, 0x5a, 0xa3, 0xaa, 0xa5, 0x2c, 0x10, 0x62, 0x51, 0xb1,
	0xb2, 0xaa, 0x76, 0x59, 0xa9, 0x92, 0xad, 0x5a, 0xaa, 0xe4, 0x7a, 0x33, 0x96, 0xda, 0xa5, 0x4b,
	0xed, 0x91, 0x8b, 0x6c, 0x0c, 0x1d, 0x86, 0xaa, 0xbe, 0x42, 0x4e, 0x90, 0xb3, 0xe4, 0x04, 0x59,
	0xe6, 0x08, 0x91, 0x73, 0x91, 0x88, 0x19, 0x83, 0x21, 0x90, 0x4d, 0x4c, 0x76, 0xf3, 0x7e, 0xf8,
	0xbe, 0x8f, 0xef, 0xbd, 0x07, 0xaf, 0xfe, 0x79, 0xdb, 0x84, 0x2e, 0xbc, 0xc8, 0x1f, 0x46, 0x2c,
	0xe4, 0x21, 0x06, 0x91, 0x10, 0x6f, 0x07, 0xe0, 0xc5, 0x24, 0x88, 0xf8, 0x7e, 0x16, 0xaf, 0x9d,
	0x0b, 0x04, 0xda, 0x4f, 0xe6, 0x73, 0x4a, 0xe8, 0xdf, 0x84, 0xc6, 0x1c, 0xbf, 0x86, 0x0e, 0x8b,
	0x96, 0xfe, 0xca, 0x40, 0x36, 0x72, 0x75, 0x22, 0x03, 0x8c, 0x41, 0xdd, 0xd0, 0xfd, 0xc8, 0x68,
	0xdb, 0xc8, 0x55, 0x89, 0x78, 0x1f, 0x73, 0x63, 0x43, 0xc9, 0x73, 0xe3, 0xf4, 0x6b, 0x41, 0x64,
	0xa8, 0x36, 0x72, 0x35, 0x22, 0x03, 0xfc, 0x1e, 0xfa, 0xdc, 0x0f, 0x68, 0xcc, 0xbd, 0x20, 0x9a,
	0xf9, 0x4b, 0x16, 0x1a, 0x1d, 0x1b, 0xb9, 0x0a, 0x79, 0x90, 0x75, 0x66, 0xa0, 0x7f, 0x0f, 0xc3,
	0x4d, 0x12, 0x35, 0x22, 0xc6, 0x99, 0x42, 0x8f, 0x50, 0x6f, 0xd5, 0x0c, 0x58, 0x02, 0xfa, 0x57,
	0xba, 0xa5, 0x4d, 0x19, 0x55, 0xb5, 0x44, 0xad, 0xb5, 0x64, 0x01, 0xfa, 0x71, 0x3c, 0x71, 0x14,
	0xee, 0x62, 0xfa, 0x08, 0x6d, 0x15, 0xae, 0x5d, 0x07, 0x87, 0x07, 0xa0, 0x50, 0xc6, 0x84, 0x92,
	0x97, 0x24, 0x7d, 0x3a, 0xff, 0xa1, 0x9f, 0x79, 0xde, 0x08, 0xc3, 0x1b, 0xe8, 0x6e, 0xe9, 0x6e,
	0xcd, 0xff, 0x08, 0x12, 0x9d, 0x1c, 0xa3, 0x8c, 0x59, 0x3d, 0x31, 0x73, 0xd0, 0xe4, 0x78, 0x1a,
	0xe1, 0xcd, 0x37, 0x4f, 0x29, 0x6e, 0x5e, 0x95, 0xf5, 0x17, 0xf4, 0xb3, 0x39, 0x3e, 0x8f, 0xa3,
	0x1f, 0xaf, 0x54, 0x80, 0x1f, 0x29, 0xfb, 0x9c, 0x87, 0x8c, 0xe2, 0x2f, 0xd0, 0x11, 0x13, 0xc4,
	0xc6, 0xf0, 0x74, 0x83, 0xc3, 0xe2, 0xcd, 0x99, 0xef, 0x6a, 0x2a, 0x52, 0x9c, 0xd3, 0xc2, 0xdf,
	0xa0, 0x37, 0xe7, 0x8c, 0x7a, 0xc1, 0x39, 0x28, 0x2e, 0xfa, 0x80, 0xf0, 0x08, 0xba, 0x72, 0xd4,
	0xb8, 0xd4, 0x5a, 0x3a, 0x39, 0xd3, 0xac, 0x2b, 0xe5, 0x62, 0xa6, 0xa0, 0x49, 0x31, 0x67, 0x02,
	0x09, 0x3d, 0x9f, 0x41, 0x4d, 0x17, 0x00, 0xbf, 0x2d, 0x76, 0x16, 0x2e, 0xd6, 0x34, 0xaa, 0x85,
	0x5c, 0xc9, 0x04, 0x40, 0x2a, 0x79, 0x32, 0x44, 0xe6, 0x89, 0x5c, 0x87, 0xf2, 0xaf, 0x94, 0x4e,
	0xbd, 0xfc, 0x2b, 0xe5, 0xed, 0x29, 0x7a, 0x72, 0x26, 0x50, 0xaa, 0x67, 0x3c, 0xb8, 0x3e, 0x58,
	0xe8, 0xe6, 0x60, 0xa1, 0xdb, 0x83, 0x85, 0x2e, 0xef, 0xac, 0xd6, 0xef, 0xae, 0xe8, 0xfe, 0x74,
	0x1f, 0x00, 0x00, 0xff, 0xff, 0x01, 0x3b, 0x14, 0x2e, 0xd3, 0x05, 0x00, 0x00,
}
