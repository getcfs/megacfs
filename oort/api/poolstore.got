package api

import (
    "fmt"

    "github.com/getcfs/megacfs/ftls"
    "github.com/gholt/store"
    "golang.org/x/net/context"
    "google.golang.org/grpc"
)

type Pool{{.T}}Store struct {
    addr            string
    size            int
    concurrency     int
    ftlsConfig      *ftls.Config
    opts            []grpc.DialOption
    stores          []store.{{.T}}Store
    storeChan       chan store.{{.T}}Store
}

func NewPool{{.T}}Store(addr string, size int, concurrency int, ftlsConfig *ftls.Config, opts ...grpc.DialOption) *Pool{{.T}}Store {
    ps := &Pool{{.T}}Store{
        addr:           addr,
        size:           size,
        concurrency:    concurrency,
        ftlsConfig:     ftlsConfig,
        opts:           opts,
        stores:         make([]store.{{.T}}Store, size),
        storeChan:      make(chan store.{{.T}}Store, size),
    }
    for i := 0; i < ps.size; i++ {
        ps.stores[i] = New{{.T}}Store(ps.addr, ps.concurrency, ps.ftlsConfig, ps.opts...)
        ps.storeChan <- ps.stores[i]
    }
    return ps
}

func (ps *Pool{{.T}}Store) Startup(ctx context.Context) error {
    for i := 0; i < ps.size; i++ {
        ps.stores[i].Startup(ctx)
        select {
        case <-ctx.Done():
            return ctx.Err()
        default:
        }
    }
    return nil
}

func (ps *Pool{{.T}}Store) Shutdown(ctx context.Context) error {
    for i := 0; i < ps.size; i++ {
        ps.stores[i].Shutdown(ctx)
        select {
        case <-ctx.Done():
            return ctx.Err()
        default:
        }
    }
    return nil
}

func (ps *Pool{{.T}}Store) EnableWrites(ctx context.Context) error {
    // TODO: Should actually implement this feature.
    return nil
}

func (ps *Pool{{.T}}Store) DisableWrites(ctx context.Context) error {
    return nil
}

func (ps *Pool{{.T}}Store) Flush(ctx context.Context) error {
    // TODO: NOP for now
    return nil
}

func (ps *Pool{{.T}}Store) AuditPass(ctx context.Context) error {
    // TODO: NOP for now
    return nil
}

func (ps *Pool{{.T}}Store) Stats(ctx context.Context, debug bool) (fmt.Stringer, error) {
    // TODO: NOP for now
    return nil, nil
}

func (ps *Pool{{.T}}Store) ValueCap(ctx context.Context) (uint32, error) {
    // TODO: NOP for now
    return 0xffffffff, nil
}

func (ps *Pool{{.T}}Store) Lookup(ctx context.Context, keyA uint64, keyB uint64{{if eq .t "group"}}, childKeyA uint64, childKeyB uint64{{end}}) (int64, uint32, error) {
    select {
    case s := <-ps.storeChan:
        a, b, c := s.Lookup(ctx, keyA, keyB{{if eq .t "group"}}, childKeyA, childKeyB{{end}})
        ps.storeChan <- s
        return a, b, c
    case <-ctx.Done():
        return 0, 0, ctx.Err()
    }
}

func (ps *Pool{{.T}}Store) Read(ctx context.Context, keyA uint64, keyB uint64{{if eq .t "group"}}, childKeyA uint64, childKeyB uint64{{end}}, value []byte) (int64, []byte, error) {
    select {
    case s := <-ps.storeChan:
        a, b, c := s.Read(ctx, keyA, keyB{{if eq .t "group"}}, childKeyA, childKeyB{{end}}, value)
        ps.storeChan <- s
        return a, b, c
    case <-ctx.Done():
        return 0, nil, ctx.Err()
    }
}

func (ps *Pool{{.T}}Store) Write(ctx context.Context, keyA uint64, keyB uint64{{if eq .t "group"}}, childKeyA uint64, childKeyB uint64{{end}}, timestampMicro int64, value []byte) (int64, error) {
    select {
    case s := <-ps.storeChan:
        a, b := s.Write(ctx, keyA, keyB{{if eq .t "group"}}, childKeyA, childKeyB{{end}}, timestampMicro, value)
        ps.storeChan <- s
        return a, b
    case <-ctx.Done():
        return 0, ctx.Err()
    }
}

func (ps *Pool{{.T}}Store) Delete(ctx context.Context, keyA uint64, keyB uint64{{if eq .t "group"}}, childKeyA uint64, childKeyB uint64{{end}}, timestampMicro int64) (int64, error) {
    select {
    case s := <-ps.storeChan:
        a, b := s.Delete(ctx, keyA, keyB{{if eq .t "group"}}, childKeyA, childKeyB{{end}}, timestampMicro)
        ps.storeChan <- s
        return a, b
    case <-ctx.Done():
        return 0, ctx.Err()
    }
}

{{if eq .t "group"}}
func (ps *PoolGroupStore) LookupGroup(ctx context.Context, parentKeyA, parentKeyB uint64) ([]store.LookupGroupItem, error) {
    select {
    case s := <-ps.storeChan:
        a, b := s.LookupGroup(ctx, parentKeyA, parentKeyB)
        ps.storeChan <- s
        return a, b
    case <-ctx.Done():
        return nil, ctx.Err()
    }
}

func (ps *PoolGroupStore) ReadGroup(ctx context.Context, parentKeyA, parentKeyB uint64) ([]store.ReadGroupItem, error) {
    select {
    case s := <-ps.storeChan:
        a, b := s.ReadGroup(ctx, parentKeyA, parentKeyB)
        ps.storeChan <- s
        return a, b
    case <-ctx.Done():
        return nil, ctx.Err()
    }
}
{{end}}
