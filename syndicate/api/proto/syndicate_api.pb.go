// Code generated by protoc-gen-gogo.
// source: syndicate_api.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		syndicate_api.proto

	It has these top-level messages:
		EmptyMsg
		RingStatus
		NodeStatus
		RingOpts
		Node
		ModifyMsg
		RingConf
		Conf
		SubscriberID
		RegisterRequest
		HardwareProfile
		Disk
		NodeConfig
		Ring
		SearchResult
		NodeSoftwareVersion
		NodeUpgrade
		NodeUpgradeStatus
		RingMsg
		StoreResult
		StatusRequest
		StatusMsg
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto1.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{0} }

type RingStatus struct {
	Status  bool  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *RingStatus) Reset()                    { *m = RingStatus{} }
func (m *RingStatus) String() string            { return proto1.CompactTextString(m) }
func (*RingStatus) ProtoMessage()               {}
func (*RingStatus) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{1} }

type NodeStatus struct {
	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *NodeStatus) Reset()                    { *m = NodeStatus{} }
func (m *NodeStatus) String() string            { return proto1.CompactTextString(m) }
func (*NodeStatus) ProtoMessage()               {}
func (*NodeStatus) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{2} }

type RingOpts struct {
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
}

func (m *RingOpts) Reset()                    { *m = RingOpts{} }
func (m *RingOpts) String() string            { return proto1.CompactTextString(m) }
func (*RingOpts) ProtoMessage()               {}
func (*RingOpts) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{3} }

type Node struct {
	Id        uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Active    bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	Capacity  uint32   `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Tiers     []string `protobuf:"bytes,4,rep,name=tiers" json:"tiers,omitempty"`
	Addresses []string `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
	Meta      string   `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	Conf      []byte   `protobuf:"bytes,7,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{4} }

type ModifyMsg struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Id    uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ModifyMsg) Reset()                    { *m = ModifyMsg{} }
func (m *ModifyMsg) String() string            { return proto1.CompactTextString(m) }
func (*ModifyMsg) ProtoMessage()               {}
func (*ModifyMsg) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{5} }

type RingConf struct {
	Status *RingStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Conf   *Conf       `protobuf:"bytes,2,opt,name=conf" json:"conf,omitempty"`
}

func (m *RingConf) Reset()                    { *m = RingConf{} }
func (m *RingConf) String() string            { return proto1.CompactTextString(m) }
func (*RingConf) ProtoMessage()               {}
func (*RingConf) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{6} }

func (m *RingConf) GetStatus() *RingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RingConf) GetConf() *Conf {
	if m != nil {
		return m.Conf
	}
	return nil
}

type Conf struct {
	Conf            []byte `protobuf:"bytes,1,opt,name=conf,proto3" json:"conf,omitempty"`
	RestartRequired bool   `protobuf:"varint,2,opt,name=restartRequired,proto3" json:"restartRequired,omitempty"`
}

func (m *Conf) Reset()                    { *m = Conf{} }
func (m *Conf) String() string            { return proto1.CompactTextString(m) }
func (*Conf) ProtoMessage()               {}
func (*Conf) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{7} }

type SubscriberID struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SubscriberID) Reset()                    { *m = SubscriberID{} }
func (m *SubscriberID) String() string            { return proto1.CompactTextString(m) }
func (*SubscriberID) ProtoMessage()               {}
func (*SubscriberID) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{8} }

type RegisterRequest struct {
	Hostname string           `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Addrs    []string         `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	Tiers    []string         `protobuf:"bytes,3,rep,name=tiers" json:"tiers,omitempty"`
	Hardware *HardwareProfile `protobuf:"bytes,4,opt,name=hardware" json:"hardware,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto1.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{9} }

func (m *RegisterRequest) GetHardware() *HardwareProfile {
	if m != nil {
		return m.Hardware
	}
	return nil
}

type HardwareProfile struct {
	Memtotal uint64  `protobuf:"varint,1,opt,name=memtotal,proto3" json:"memtotal,omitempty"`
	Memfree  uint64  `protobuf:"varint,2,opt,name=memfree,proto3" json:"memfree,omitempty"`
	Cpus     int64   `protobuf:"varint,3,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Disks    []*Disk `protobuf:"bytes,4,rep,name=disks" json:"disks,omitempty"`
}

func (m *HardwareProfile) Reset()                    { *m = HardwareProfile{} }
func (m *HardwareProfile) String() string            { return proto1.CompactTextString(m) }
func (*HardwareProfile) ProtoMessage()               {}
func (*HardwareProfile) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{10} }

func (m *HardwareProfile) GetDisks() []*Disk {
	if m != nil {
		return m.Disks
	}
	return nil
}

type Disk struct {
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Size_  uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Used   uint64 `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
}

func (m *Disk) Reset()                    { *m = Disk{} }
func (m *Disk) String() string            { return proto1.CompactTextString(m) }
func (*Disk) ProtoMessage()               {}
func (*Disk) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{11} }

type NodeConfig struct {
	Localid uint64 `protobuf:"varint,1,opt,name=localid,proto3" json:"localid,omitempty"`
	Ring    []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto1.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{12} }

type Ring struct {
	Version int64  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Ring    []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (m *Ring) Reset()                    { *m = Ring{} }
func (m *Ring) String() string            { return proto1.CompactTextString(m) }
func (*Ring) ProtoMessage()               {}
func (*Ring) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{13} }

type SearchResult struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto1.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{14} }

func (m *SearchResult) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeSoftwareVersion struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *NodeSoftwareVersion) Reset()                    { *m = NodeSoftwareVersion{} }
func (m *NodeSoftwareVersion) String() string            { return proto1.CompactTextString(m) }
func (*NodeSoftwareVersion) ProtoMessage()               {}
func (*NodeSoftwareVersion) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{15} }

type NodeUpgrade struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *NodeUpgrade) Reset()                    { *m = NodeUpgrade{} }
func (m *NodeUpgrade) String() string            { return proto1.CompactTextString(m) }
func (*NodeUpgrade) ProtoMessage()               {}
func (*NodeUpgrade) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{16} }

type NodeUpgradeStatus struct {
	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *NodeUpgradeStatus) Reset()                    { *m = NodeUpgradeStatus{} }
func (m *NodeUpgradeStatus) String() string            { return proto1.CompactTextString(m) }
func (*NodeUpgradeStatus) ProtoMessage()               {}
func (*NodeUpgradeStatus) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{17} }

type RingMsg struct {
	Version  int64  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Ring     []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
	Builder  []byte `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	Deadline int64  `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Rollback int64  `protobuf:"varint,5,opt,name=rollback,proto3" json:"rollback,omitempty"`
}

func (m *RingMsg) Reset()                    { *m = RingMsg{} }
func (m *RingMsg) String() string            { return proto1.CompactTextString(m) }
func (*RingMsg) ProtoMessage()               {}
func (*RingMsg) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{18} }

type StoreResult struct {
	Version int64  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Ring    bool   `protobuf:"varint,2,opt,name=ring,proto3" json:"ring,omitempty"`
	Builder bool   `protobuf:"varint,3,opt,name=builder,proto3" json:"builder,omitempty"`
	ErrMsg  string `protobuf:"bytes,4,opt,name=ErrMsg,json=errMsg,proto3" json:"ErrMsg,omitempty"`
}

func (m *StoreResult) Reset()                    { *m = StoreResult{} }
func (m *StoreResult) String() string            { return proto1.CompactTextString(m) }
func (*StoreResult) ProtoMessage()               {}
func (*StoreResult) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{19} }

type StatusRequest struct {
	Ring    bool `protobuf:"varint,1,opt,name=ring,proto3" json:"ring,omitempty"`
	Builder bool `protobuf:"varint,2,opt,name=builder,proto3" json:"builder,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto1.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{20} }

type StatusMsg struct {
	Version      int64  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Ringstats    string `protobuf:"bytes,2,opt,name=ringstats,proto3" json:"ringstats,omitempty"`
	Builderstats string `protobuf:"bytes,3,opt,name=builderstats,proto3" json:"builderstats,omitempty"`
	Master       string `protobuf:"bytes,4,opt,name=master,proto3" json:"master,omitempty"`
}

func (m *StatusMsg) Reset()                    { *m = StatusMsg{} }
func (m *StatusMsg) String() string            { return proto1.CompactTextString(m) }
func (*StatusMsg) ProtoMessage()               {}
func (*StatusMsg) Descriptor() ([]byte, []int) { return fileDescriptorSyndicateApi, []int{21} }

func init() {
	proto1.RegisterType((*EmptyMsg)(nil), "proto.EmptyMsg")
	proto1.RegisterType((*RingStatus)(nil), "proto.RingStatus")
	proto1.RegisterType((*NodeStatus)(nil), "proto.NodeStatus")
	proto1.RegisterType((*RingOpts)(nil), "proto.RingOpts")
	proto1.RegisterType((*Node)(nil), "proto.Node")
	proto1.RegisterType((*ModifyMsg)(nil), "proto.ModifyMsg")
	proto1.RegisterType((*RingConf)(nil), "proto.RingConf")
	proto1.RegisterType((*Conf)(nil), "proto.Conf")
	proto1.RegisterType((*SubscriberID)(nil), "proto.SubscriberID")
	proto1.RegisterType((*RegisterRequest)(nil), "proto.RegisterRequest")
	proto1.RegisterType((*HardwareProfile)(nil), "proto.HardwareProfile")
	proto1.RegisterType((*Disk)(nil), "proto.Disk")
	proto1.RegisterType((*NodeConfig)(nil), "proto.NodeConfig")
	proto1.RegisterType((*Ring)(nil), "proto.Ring")
	proto1.RegisterType((*SearchResult)(nil), "proto.SearchResult")
	proto1.RegisterType((*NodeSoftwareVersion)(nil), "proto.NodeSoftwareVersion")
	proto1.RegisterType((*NodeUpgrade)(nil), "proto.NodeUpgrade")
	proto1.RegisterType((*NodeUpgradeStatus)(nil), "proto.NodeUpgradeStatus")
	proto1.RegisterType((*RingMsg)(nil), "proto.RingMsg")
	proto1.RegisterType((*StoreResult)(nil), "proto.StoreResult")
	proto1.RegisterType((*StatusRequest)(nil), "proto.StatusRequest")
	proto1.RegisterType((*StatusMsg)(nil), "proto.StatusMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Syndicate service

type SyndicateClient interface {
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	ModNode(ctx context.Context, in *ModifyMsg, opts ...grpc.CallOption) (*RingStatus, error)
	SetConf(ctx context.Context, in *Conf, opts ...grpc.CallOption) (*RingStatus, error)
	SetReplicas(ctx context.Context, in *RingOpts, opts ...grpc.CallOption) (*RingStatus, error)
	SetActive(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	SetCapacity(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	ReplaceAddresses(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	ReplaceTiers(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	GetVersion(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingStatus, error)
	GetGlobalConfig(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingConf, error)
	GetNodeConfig(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingConf, error)
	GetNodeSoftwareVersion(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeSoftwareVersion, error)
	NodeUpgradeSoftwareVersion(ctx context.Context, in *NodeUpgrade, opts ...grpc.CallOption) (*NodeUpgradeStatus, error)
	SearchNodes(ctx context.Context, in *Node, opts ...grpc.CallOption) (*SearchResult, error)
	GetRing(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Ring, error)
	GetRingStream(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (Syndicate_GetRingStreamClient, error)
	RegisterNode(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*NodeConfig, error)
	RestartNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeStatus, error)
}

type syndicateClient struct {
	cc *grpc.ClientConn
}

func NewSyndicateClient(cc *grpc.ClientConn) SyndicateClient {
	return &syndicateClient{cc}
}

func (c *syndicateClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/RemoveNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) ModNode(ctx context.Context, in *ModifyMsg, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/ModNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) SetConf(ctx context.Context, in *Conf, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/SetConf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) SetReplicas(ctx context.Context, in *RingOpts, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/SetReplicas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) SetActive(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/SetActive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) SetCapacity(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/SetCapacity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) ReplaceAddresses(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/ReplaceAddresses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) ReplaceTiers(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/ReplaceTiers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetVersion(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetGlobalConfig(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingConf, error) {
	out := new(RingConf)
	err := grpc.Invoke(ctx, "/proto.Syndicate/GetGlobalConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetNodeConfig(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingConf, error) {
	out := new(RingConf)
	err := grpc.Invoke(ctx, "/proto.Syndicate/GetNodeConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetNodeSoftwareVersion(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeSoftwareVersion, error) {
	out := new(NodeSoftwareVersion)
	err := grpc.Invoke(ctx, "/proto.Syndicate/GetNodeSoftwareVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) NodeUpgradeSoftwareVersion(ctx context.Context, in *NodeUpgrade, opts ...grpc.CallOption) (*NodeUpgradeStatus, error) {
	out := new(NodeUpgradeStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/NodeUpgradeSoftwareVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) SearchNodes(ctx context.Context, in *Node, opts ...grpc.CallOption) (*SearchResult, error) {
	out := new(SearchResult)
	err := grpc.Invoke(ctx, "/proto.Syndicate/SearchNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetRing(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Ring, error) {
	out := new(Ring)
	err := grpc.Invoke(ctx, "/proto.Syndicate/GetRing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetRingStream(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (Syndicate_GetRingStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Syndicate_serviceDesc.Streams[0], c.cc, "/proto.Syndicate/GetRingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &syndicateGetRingStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Syndicate_GetRingStreamClient interface {
	Recv() (*Ring, error)
	grpc.ClientStream
}

type syndicateGetRingStreamClient struct {
	grpc.ClientStream
}

func (x *syndicateGetRingStreamClient) Recv() (*Ring, error) {
	m := new(Ring)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syndicateClient) RegisterNode(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*NodeConfig, error) {
	out := new(NodeConfig)
	err := grpc.Invoke(ctx, "/proto.Syndicate/RegisterNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) RestartNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeStatus, error) {
	out := new(NodeStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/RestartNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Syndicate service

type SyndicateServer interface {
	AddNode(context.Context, *Node) (*RingStatus, error)
	RemoveNode(context.Context, *Node) (*RingStatus, error)
	ModNode(context.Context, *ModifyMsg) (*RingStatus, error)
	SetConf(context.Context, *Conf) (*RingStatus, error)
	SetReplicas(context.Context, *RingOpts) (*RingStatus, error)
	SetActive(context.Context, *Node) (*RingStatus, error)
	SetCapacity(context.Context, *Node) (*RingStatus, error)
	ReplaceAddresses(context.Context, *Node) (*RingStatus, error)
	ReplaceTiers(context.Context, *Node) (*RingStatus, error)
	GetVersion(context.Context, *EmptyMsg) (*RingStatus, error)
	GetGlobalConfig(context.Context, *EmptyMsg) (*RingConf, error)
	GetNodeConfig(context.Context, *Node) (*RingConf, error)
	GetNodeSoftwareVersion(context.Context, *Node) (*NodeSoftwareVersion, error)
	NodeUpgradeSoftwareVersion(context.Context, *NodeUpgrade) (*NodeUpgradeStatus, error)
	SearchNodes(context.Context, *Node) (*SearchResult, error)
	GetRing(context.Context, *EmptyMsg) (*Ring, error)
	GetRingStream(*SubscriberID, Syndicate_GetRingStreamServer) error
	RegisterNode(context.Context, *RegisterRequest) (*NodeConfig, error)
	RestartNode(context.Context, *Node) (*NodeStatus, error)
}

func RegisterSyndicateServer(s *grpc.Server, srv SyndicateServer) {
	s.RegisterService(&_Syndicate_serviceDesc, srv)
}

func _Syndicate_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).AddNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).RemoveNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_ModNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).ModNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/ModNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).ModNode(ctx, req.(*ModifyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_SetConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).SetConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/SetConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).SetConf(ctx, req.(*Conf))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_SetReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RingOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).SetReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/SetReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).SetReplicas(ctx, req.(*RingOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_SetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).SetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/SetActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).SetActive(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_SetCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).SetCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/SetCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).SetCapacity(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_ReplaceAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).ReplaceAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/ReplaceAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).ReplaceAddresses(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_ReplaceTiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).ReplaceTiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/ReplaceTiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).ReplaceTiers(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).GetVersion(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_GetGlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).GetGlobalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/GetGlobalConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).GetGlobalConfig(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_GetNodeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).GetNodeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/GetNodeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).GetNodeConfig(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_GetNodeSoftwareVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).GetNodeSoftwareVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/GetNodeSoftwareVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).GetNodeSoftwareVersion(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_NodeUpgradeSoftwareVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUpgrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).NodeUpgradeSoftwareVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/NodeUpgradeSoftwareVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).NodeUpgradeSoftwareVersion(ctx, req.(*NodeUpgrade))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).SearchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/SearchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).SearchNodes(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_GetRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).GetRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/GetRing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).GetRing(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_GetRingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriberID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyndicateServer).GetRingStream(m, &syndicateGetRingStreamServer{stream})
}

type Syndicate_GetRingStreamServer interface {
	Send(*Ring) error
	grpc.ServerStream
}

type syndicateGetRingStreamServer struct {
	grpc.ServerStream
}

func (x *syndicateGetRingStreamServer) Send(m *Ring) error {
	return x.ServerStream.SendMsg(m)
}

func _Syndicate_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).RegisterNode(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syndicate_RestartNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyndicateServer).RestartNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syndicate/RestartNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyndicateServer).RestartNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _Syndicate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Syndicate",
	HandlerType: (*SyndicateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _Syndicate_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Syndicate_RemoveNode_Handler,
		},
		{
			MethodName: "ModNode",
			Handler:    _Syndicate_ModNode_Handler,
		},
		{
			MethodName: "SetConf",
			Handler:    _Syndicate_SetConf_Handler,
		},
		{
			MethodName: "SetReplicas",
			Handler:    _Syndicate_SetReplicas_Handler,
		},
		{
			MethodName: "SetActive",
			Handler:    _Syndicate_SetActive_Handler,
		},
		{
			MethodName: "SetCapacity",
			Handler:    _Syndicate_SetCapacity_Handler,
		},
		{
			MethodName: "ReplaceAddresses",
			Handler:    _Syndicate_ReplaceAddresses_Handler,
		},
		{
			MethodName: "ReplaceTiers",
			Handler:    _Syndicate_ReplaceTiers_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Syndicate_GetVersion_Handler,
		},
		{
			MethodName: "GetGlobalConfig",
			Handler:    _Syndicate_GetGlobalConfig_Handler,
		},
		{
			MethodName: "GetNodeConfig",
			Handler:    _Syndicate_GetNodeConfig_Handler,
		},
		{
			MethodName: "GetNodeSoftwareVersion",
			Handler:    _Syndicate_GetNodeSoftwareVersion_Handler,
		},
		{
			MethodName: "NodeUpgradeSoftwareVersion",
			Handler:    _Syndicate_NodeUpgradeSoftwareVersion_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _Syndicate_SearchNodes_Handler,
		},
		{
			MethodName: "GetRing",
			Handler:    _Syndicate_GetRing_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _Syndicate_RegisterNode_Handler,
		},
		{
			MethodName: "RestartNode",
			Handler:    _Syndicate_RestartNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRingStream",
			Handler:       _Syndicate_GetRingStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptorSyndicateApi,
}

// Client API for RingDist service

type RingDistClient interface {
	Store(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error)
	Revert(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusMsg, error)
	Setup(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error)
}

type ringDistClient struct {
	cc *grpc.ClientConn
}

func NewRingDistClient(cc *grpc.ClientConn) RingDistClient {
	return &ringDistClient{cc}
}

func (c *ringDistClient) Store(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := grpc.Invoke(ctx, "/proto.RingDist/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDistClient) Revert(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := grpc.Invoke(ctx, "/proto.RingDist/Revert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDistClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/proto.RingDist/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDistClient) Setup(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := grpc.Invoke(ctx, "/proto.RingDist/Setup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RingDist service

type RingDistServer interface {
	Store(context.Context, *RingMsg) (*StoreResult, error)
	Revert(context.Context, *RingMsg) (*StoreResult, error)
	Status(context.Context, *StatusRequest) (*StatusMsg, error)
	Setup(context.Context, *RingMsg) (*StoreResult, error)
}

func RegisterRingDistServer(s *grpc.Server, srv RingDistServer) {
	s.RegisterService(&_RingDist_serviceDesc, srv)
}

func _RingDist_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingDistServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RingDist/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingDistServer).Store(ctx, req.(*RingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingDist_Revert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingDistServer).Revert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RingDist/Revert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingDistServer).Revert(ctx, req.(*RingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingDist_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingDistServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RingDist/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingDistServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingDist_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingDistServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RingDist/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingDistServer).Setup(ctx, req.(*RingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _RingDist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RingDist",
	HandlerType: (*RingDistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _RingDist_Store_Handler,
		},
		{
			MethodName: "Revert",
			Handler:    _RingDist_Revert_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _RingDist_Status_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _RingDist_Setup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorSyndicateApi,
}

func (m *EmptyMsg) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmptyMsg) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RingStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RingStatus) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		data[i] = 0x8
		i++
		if m.Status {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Version != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Version))
	}
	return i, nil
}

func (m *NodeStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NodeStatus) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		data[i] = 0x8
		i++
		if m.Status {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Msg) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Msg)))
		i += copy(data[i:], m.Msg)
	}
	return i, nil
}

func (m *RingOpts) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RingOpts) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Replicas != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Replicas))
	}
	return i, nil
}

func (m *Node) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Node) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Id))
	}
	if m.Active {
		data[i] = 0x10
		i++
		if m.Active {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Capacity != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Capacity))
	}
	if len(m.Tiers) > 0 {
		for _, s := range m.Tiers {
			data[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			data[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Meta) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Meta)))
		i += copy(data[i:], m.Meta)
	}
	if len(m.Conf) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Conf)))
		i += copy(data[i:], m.Conf)
	}
	return i, nil
}

func (m *ModifyMsg) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ModifyMsg) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	if m.Id != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RingConf) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RingConf) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Conf != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Conf.Size()))
		n2, err := m.Conf.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Conf) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Conf) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Conf) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Conf)))
		i += copy(data[i:], m.Conf)
	}
	if m.RestartRequired {
		data[i] = 0x10
		i++
		if m.RestartRequired {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SubscriberID) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscriberID) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	return i, nil
}

func (m *RegisterRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RegisterRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Hostname)))
		i += copy(data[i:], m.Hostname)
	}
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Tiers) > 0 {
		for _, s := range m.Tiers {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Hardware != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Hardware.Size()))
		n3, err := m.Hardware.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *HardwareProfile) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *HardwareProfile) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Memtotal != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Memtotal))
	}
	if m.Memfree != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Memfree))
	}
	if m.Cpus != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Cpus))
	}
	if len(m.Disks) > 0 {
		for _, msg := range m.Disks {
			data[i] = 0x22
			i++
			i = encodeVarintSyndicateApi(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Disk) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Disk) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Device) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Device)))
		i += copy(data[i:], m.Device)
	}
	if len(m.Path) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	if m.Size_ != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Size_))
	}
	if m.Used != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Used))
	}
	return i, nil
}

func (m *NodeConfig) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NodeConfig) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Localid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Localid))
	}
	if len(m.Ring) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Ring)))
		i += copy(data[i:], m.Ring)
	}
	return i, nil
}

func (m *Ring) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Ring) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Version))
	}
	if len(m.Ring) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Ring)))
		i += copy(data[i:], m.Ring)
	}
	return i, nil
}

func (m *SearchResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			data[i] = 0xa
			i++
			i = encodeVarintSyndicateApi(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NodeSoftwareVersion) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NodeSoftwareVersion) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Version)))
		i += copy(data[i:], m.Version)
	}
	return i, nil
}

func (m *NodeUpgrade) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NodeUpgrade) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Id))
	}
	if len(m.Version) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Version)))
		i += copy(data[i:], m.Version)
	}
	return i, nil
}

func (m *NodeUpgradeStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NodeUpgradeStatus) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		data[i] = 0x8
		i++
		if m.Status {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Msg) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Msg)))
		i += copy(data[i:], m.Msg)
	}
	return i, nil
}

func (m *RingMsg) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RingMsg) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Version))
	}
	if len(m.Ring) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Ring)))
		i += copy(data[i:], m.Ring)
	}
	if len(m.Builder) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Builder)))
		i += copy(data[i:], m.Builder)
	}
	if m.Deadline != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Deadline))
	}
	if m.Rollback != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Rollback))
	}
	return i, nil
}

func (m *StoreResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StoreResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Version))
	}
	if m.Ring {
		data[i] = 0x10
		i++
		if m.Ring {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Builder {
		data[i] = 0x18
		i++
		if m.Builder {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.ErrMsg) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.ErrMsg)))
		i += copy(data[i:], m.ErrMsg)
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ring {
		data[i] = 0x8
		i++
		if m.Ring {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Builder {
		data[i] = 0x10
		i++
		if m.Builder {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *StatusMsg) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusMsg) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(m.Version))
	}
	if len(m.Ringstats) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Ringstats)))
		i += copy(data[i:], m.Ringstats)
	}
	if len(m.Builderstats) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Builderstats)))
		i += copy(data[i:], m.Builderstats)
	}
	if len(m.Master) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSyndicateApi(data, i, uint64(len(m.Master)))
		i += copy(data[i:], m.Master)
	}
	return i, nil
}

func encodeFixed64SyndicateApi(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SyndicateApi(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSyndicateApi(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *EmptyMsg) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RingStatus) Size() (n int) {
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.Version != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Version))
	}
	return n
}

func (m *NodeStatus) Size() (n int) {
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *RingOpts) Size() (n int) {
	var l int
	_ = l
	if m.Replicas != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Replicas))
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Id))
	}
	if m.Active {
		n += 2
	}
	if m.Capacity != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Capacity))
	}
	if len(m.Tiers) > 0 {
		for _, s := range m.Tiers {
			l = len(s)
			n += 1 + l + sovSyndicateApi(uint64(l))
		}
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovSyndicateApi(uint64(l))
		}
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	l = len(m.Conf)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *ModifyMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Id))
	}
	return n
}

func (m *RingConf) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	if m.Conf != nil {
		l = m.Conf.Size()
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *Conf) Size() (n int) {
	var l int
	_ = l
	l = len(m.Conf)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	if m.RestartRequired {
		n += 2
	}
	return n
}

func (m *SubscriberID) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *RegisterRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovSyndicateApi(uint64(l))
		}
	}
	if len(m.Tiers) > 0 {
		for _, s := range m.Tiers {
			l = len(s)
			n += 1 + l + sovSyndicateApi(uint64(l))
		}
	}
	if m.Hardware != nil {
		l = m.Hardware.Size()
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *HardwareProfile) Size() (n int) {
	var l int
	_ = l
	if m.Memtotal != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Memtotal))
	}
	if m.Memfree != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Memfree))
	}
	if m.Cpus != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Cpus))
	}
	if len(m.Disks) > 0 {
		for _, e := range m.Disks {
			l = e.Size()
			n += 1 + l + sovSyndicateApi(uint64(l))
		}
	}
	return n
}

func (m *Disk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Size_))
	}
	if m.Used != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Used))
	}
	return n
}

func (m *NodeConfig) Size() (n int) {
	var l int
	_ = l
	if m.Localid != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Localid))
	}
	l = len(m.Ring)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *Ring) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Version))
	}
	l = len(m.Ring)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *SearchResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovSyndicateApi(uint64(l))
		}
	}
	return n
}

func (m *NodeSoftwareVersion) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *NodeUpgrade) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Id))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *NodeUpgradeStatus) Size() (n int) {
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *RingMsg) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Version))
	}
	l = len(m.Ring)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	l = len(m.Builder)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	if m.Deadline != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Deadline))
	}
	if m.Rollback != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Rollback))
	}
	return n
}

func (m *StoreResult) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Version))
	}
	if m.Ring {
		n += 2
	}
	if m.Builder {
		n += 2
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	if m.Ring {
		n += 2
	}
	if m.Builder {
		n += 2
	}
	return n
}

func (m *StatusMsg) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSyndicateApi(uint64(m.Version))
	}
	l = len(m.Ringstats)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	l = len(m.Builderstats)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	l = len(m.Master)
	if l > 0 {
		n += 1 + l + sovSyndicateApi(uint64(l))
	}
	return n
}

func sovSyndicateApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSyndicateApi(x uint64) (n int) {
	return sovSyndicateApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyMsg) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RingStatus) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RingOpts) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RingOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RingOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			m.Replicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Replicas |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Capacity |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conf = append(m.Conf[:0], data[iNdEx:postIndex]...)
			if m.Conf == nil {
				m.Conf = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyMsg) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RingConf) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RingConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RingConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RingStatus{}
			}
			if err := m.Status.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conf == nil {
				m.Conf = &Conf{}
			}
			if err := m.Conf.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Conf) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Conf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Conf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conf = append(m.Conf[:0], data[iNdEx:postIndex]...)
			if m.Conf == nil {
				m.Conf = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestartRequired = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriberID) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriberID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriberID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hardware", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hardware == nil {
				m.Hardware = &HardwareProfile{}
			}
			if err := m.Hardware.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HardwareProfile) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HardwareProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HardwareProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memtotal", wireType)
			}
			m.Memtotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Memtotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memfree", wireType)
			}
			m.Memfree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Memfree |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			m.Cpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Cpus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disks = append(m.Disks, &Disk{})
			if err := m.Disks[len(m.Disks)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Disk) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Disk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Disk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Used |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeConfig) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Localid", wireType)
			}
			m.Localid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Localid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ring", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ring = append(m.Ring[:0], data[iNdEx:postIndex]...)
			if m.Ring == nil {
				m.Ring = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ring) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ring", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ring = append(m.Ring[:0], data[iNdEx:postIndex]...)
			if m.Ring == nil {
				m.Ring = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSoftwareVersion) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSoftwareVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSoftwareVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeUpgrade) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeUpgradeStatus) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeUpgradeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeUpgradeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RingMsg) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RingMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RingMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ring", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ring = append(m.Ring[:0], data[iNdEx:postIndex]...)
			if m.Ring == nil {
				m.Ring = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builder", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Builder = append(m.Builder[:0], data[iNdEx:postIndex]...)
			if m.Builder == nil {
				m.Builder = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Deadline |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollback", wireType)
			}
			m.Rollback = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Rollback |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ring = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Builder = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ring = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Builder = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusMsg) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ringstats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ringstats = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builderstats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Builderstats = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Master", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Master = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyndicateApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyndicateApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyndicateApi(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyndicateApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyndicateApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSyndicateApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSyndicateApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSyndicateApi(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSyndicateApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyndicateApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("syndicate_api.proto", fileDescriptorSyndicateApi) }

var fileDescriptorSyndicateApi = []byte{
	// 1145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xce, 0xc4, 0xbf, 0x53, 0x76, 0x36, 0xd9, 0xd9, 0x55, 0x34, 0xb2, 0x56, 0x21, 0xcc, 0x01,
	0x79, 0xb5, 0xda, 0x3f, 0xef, 0x02, 0x12, 0x68, 0x91, 0x96, 0x64, 0x15, 0x90, 0x08, 0xa0, 0x36,
	0xec, 0x81, 0x0b, 0x6a, 0xcf, 0x94, 0x9d, 0x56, 0x66, 0x3c, 0xa6, 0xbb, 0x6d, 0x14, 0x0e, 0x70,
	0xe6, 0xc0, 0x9d, 0x27, 0xe0, 0x59, 0x38, 0x70, 0xe0, 0x11, 0x50, 0x78, 0x07, 0xce, 0xa8, 0xba,
	0x7b, 0xc6, 0x63, 0xc7, 0x90, 0xec, 0x69, 0xba, 0xba, 0xeb, 0xab, 0xae, 0xfe, 0xaa, 0xfa, 0xeb,
	0x81, 0x3b, 0xea, 0x62, 0x9a, 0x88, 0x98, 0x6b, 0xfc, 0x96, 0xcf, 0xc4, 0xa3, 0x99, 0xcc, 0x75,
	0x1e, 0x34, 0xcc, 0x27, 0x02, 0x68, 0xbf, 0xca, 0x66, 0xfa, 0xe2, 0x54, 0x4d, 0xa2, 0x8f, 0x00,
	0x98, 0x98, 0x4e, 0x86, 0x9a, 0xeb, 0xb9, 0x0a, 0xf6, 0xa1, 0xa9, 0xcc, 0x28, 0xf4, 0x0e, 0xbd,
	0x7e, 0x9b, 0x39, 0x2b, 0x08, 0xa1, 0xb5, 0x40, 0xa9, 0x44, 0x3e, 0x0d, 0xb7, 0x0f, 0xbd, 0x7e,
	0x8d, 0x15, 0x66, 0xf4, 0x1e, 0xc0, 0xe7, 0x79, 0x82, 0xd7, 0xe0, 0xf7, 0xa0, 0x96, 0xa9, 0x89,
	0xc1, 0xfa, 0x8c, 0x86, 0xd1, 0x3b, 0xd0, 0xa6, 0x7d, 0xbf, 0x98, 0x69, 0x15, 0xf4, 0xa0, 0x2d,
	0x71, 0x96, 0x8a, 0x98, 0x5b, 0x5c, 0x83, 0x95, 0x76, 0xf4, 0x9b, 0x07, 0x75, 0xda, 0x20, 0xb8,
	0x05, 0xdb, 0x22, 0x31, 0xcb, 0x75, 0xb6, 0x2d, 0x12, 0xda, 0x8a, 0xc7, 0x5a, 0x2c, 0xd0, 0x44,
	0x6d, 0x33, 0x67, 0x51, 0xb0, 0x98, 0xcf, 0x78, 0x2c, 0xf4, 0x45, 0x58, 0x3b, 0xf4, 0xfa, 0x3b,
	0xac, 0xb4, 0x83, 0xbb, 0xd0, 0xd0, 0x02, 0xa5, 0x0a, 0xeb, 0x87, 0xb5, 0xbe, 0xcf, 0xac, 0x11,
	0xdc, 0x03, 0x9f, 0x27, 0x89, 0x44, 0xa5, 0x50, 0x85, 0x0d, 0xb3, 0xb2, 0x9c, 0x08, 0x02, 0xa8,
	0x67, 0xa8, 0x79, 0xd8, 0x34, 0xb9, 0x9b, 0x31, 0xcd, 0xc5, 0xf9, 0x74, 0x1c, 0xb6, 0x0e, 0xbd,
	0x7e, 0x97, 0x99, 0x71, 0x74, 0x04, 0xfe, 0x69, 0x9e, 0x88, 0x31, 0xb1, 0x4a, 0xe7, 0x3d, 0xc7,
	0x0b, 0x93, 0xad, 0xcf, 0x68, 0x48, 0x5b, 0x2f, 0x78, 0x3a, 0x47, 0xc7, 0x81, 0x35, 0xdc, 0xa1,
	0x6a, 0xc5, 0xa1, 0xa2, 0xd7, 0x96, 0x95, 0xa3, 0x7c, 0x3a, 0x0e, 0xee, 0xaf, 0x70, 0xd9, 0x19,
	0xdc, 0xb6, 0x45, 0x7c, 0xb4, 0x2c, 0x57, 0x49, 0xef, 0x5b, 0x2e, 0x9f, 0x6d, 0xe3, 0xd8, 0x71,
	0x8e, 0x14, 0xc5, 0x25, 0x77, 0x0c, 0x75, 0x13, 0xb3, 0x48, 0xdc, 0x5b, 0x26, 0x1e, 0xf4, 0x61,
	0x57, 0xa2, 0xd2, 0x5c, 0x6a, 0x86, 0xdf, 0xcd, 0x85, 0xc4, 0xc4, 0x31, 0xba, 0x3e, 0x1d, 0x1d,
	0x40, 0x77, 0x38, 0x1f, 0xa9, 0x58, 0x8a, 0x11, 0xca, 0x4f, 0x8f, 0x2b, 0x25, 0xf1, 0x4d, 0xf6,
	0xbf, 0x78, 0xb0, 0xcb, 0x70, 0x22, 0x94, 0x46, 0x49, 0x20, 0x54, 0x9a, 0xca, 0x71, 0x96, 0x2b,
	0x3d, 0xe5, 0x19, 0x3a, 0xcf, 0xd2, 0x26, 0x4e, 0x88, 0x67, 0x15, 0x6e, 0xdb, 0x72, 0x18, 0x63,
	0x59, 0xa4, 0x5a, 0xb5, 0x48, 0x03, 0x68, 0x9f, 0x71, 0x99, 0x7c, 0xcf, 0x25, 0x86, 0x75, 0x73,
	0xcc, 0x7d, 0x77, 0xcc, 0x4f, 0xdc, 0xf4, 0x97, 0x32, 0x1f, 0x8b, 0x14, 0x59, 0xe9, 0x17, 0xfd,
	0x08, 0xbb, 0x6b, 0x8b, 0x94, 0x4e, 0x86, 0x99, 0xce, 0x35, 0x4f, 0x5d, 0x2f, 0x95, 0x36, 0x35,
	0x79, 0x86, 0xd9, 0x58, 0xa2, 0x2d, 0x52, 0x9d, 0x15, 0xa6, 0xa1, 0x6d, 0x36, 0x57, 0xa6, 0x50,
	0x35, 0x66, 0xc6, 0xc1, 0xdb, 0xd0, 0x48, 0x84, 0x3a, 0xb7, 0xbd, 0xb4, 0x24, 0xfd, 0x58, 0xa8,
	0x73, 0x66, 0x57, 0xa2, 0x6f, 0xa0, 0x4e, 0x26, 0xb5, 0x6a, 0x82, 0x0b, 0x11, 0x17, 0x0c, 0x38,
	0x8b, 0xc2, 0xce, 0xb8, 0x3e, 0x73, 0x2d, 0x61, 0xc6, 0x34, 0xa7, 0xc4, 0x0f, 0xe8, 0x7a, 0xc2,
	0x8c, 0x69, 0x6e, 0xae, 0x30, 0x31, 0xe7, 0xae, 0x33, 0x33, 0x8e, 0x3e, 0xb0, 0xf7, 0x8e, 0xaa,
	0x2a, 0x26, 0x94, 0x7a, 0x9a, 0xc7, 0x3c, 0x2d, 0x6f, 0x48, 0x61, 0x12, 0x56, 0x8a, 0xa9, 0xbd,
	0x7a, 0x5d, 0x66, 0xc6, 0xd1, 0x73, 0xa8, 0x53, 0x13, 0x55, 0x6f, 0xb5, 0xb7, 0x72, 0xab, 0x37,
	0xa2, 0x9e, 0x42, 0x77, 0x88, 0x5c, 0xc6, 0x67, 0x0c, 0xd5, 0x3c, 0xd5, 0x44, 0xc0, 0x34, 0x4f,
	0x90, 0xda, 0xb3, 0x4a, 0x00, 0x65, 0xc5, 0xec, 0x4a, 0xf4, 0x18, 0xee, 0x18, 0x71, 0xc8, 0xc7,
	0x9a, 0x8a, 0xf0, 0xda, 0x45, 0x5f, 0xdb, 0xd7, 0x5f, 0xaa, 0xc9, 0xfb, 0xd0, 0x21, 0xc0, 0xd7,
	0xb3, 0x89, 0xe4, 0x1b, 0xee, 0xfc, 0x9a, 0x0c, 0x55, 0x80, 0x2f, 0xe0, 0x76, 0x05, 0xf8, 0xc6,
	0x6a, 0xf4, 0xb3, 0x07, 0x2d, 0xa2, 0x84, 0xee, 0xee, 0x1b, 0xb1, 0x42, 0xde, 0xa3, 0xb9, 0x48,
	0x13, 0x94, 0xa6, 0x64, 0x5d, 0x56, 0x98, 0xd4, 0x6a, 0x09, 0xf2, 0x24, 0x15, 0x53, 0xdb, 0xb1,
	0x35, 0x56, 0xda, 0x46, 0xf1, 0xf2, 0x34, 0x1d, 0xf1, 0xf8, 0x3c, 0x6c, 0xd8, 0xb5, 0xc2, 0x8e,
	0x32, 0xe8, 0x0c, 0x75, 0x2e, 0xd1, 0xd1, 0x7c, 0xb3, 0x74, 0xda, 0x9b, 0xd3, 0x69, 0x2f, 0xd3,
	0xd9, 0x87, 0xe6, 0x2b, 0x29, 0x4f, 0xd5, 0xc4, 0x24, 0xe3, 0xb3, 0x26, 0x1a, 0x2b, 0x7a, 0x01,
	0x3b, 0x4e, 0x4d, 0xdc, 0x8d, 0x2d, 0xc2, 0x7a, 0x9b, 0xc3, 0x6e, 0xaf, 0x84, 0x8d, 0x7e, 0x02,
	0xdf, 0xc2, 0xff, 0x9f, 0xba, 0x7b, 0xe0, 0x53, 0x20, 0x2a, 0x80, 0x72, 0xc4, 0x2f, 0x27, 0x82,
	0x08, 0xba, 0x2e, 0x9e, 0x75, 0xa8, 0x19, 0x87, 0x95, 0x39, 0xca, 0x3f, 0xe3, 0xa4, 0x2c, 0x45,
	0xfe, 0xd6, 0x1a, 0xfc, 0xd3, 0x02, 0x7f, 0x58, 0xbc, 0x75, 0xc1, 0x03, 0x68, 0xbd, 0x4c, 0x12,
	0xf3, 0x60, 0x54, 0x1b, 0xb2, 0x77, 0x55, 0x3c, 0xa3, 0xad, 0xe0, 0x11, 0x00, 0xc3, 0x2c, 0x5f,
	0xe0, 0x0d, 0xfd, 0x9f, 0x40, 0xeb, 0x34, 0xb7, 0xc1, 0xf7, 0xdc, 0x7a, 0x29, 0xf9, 0x9b, 0x11,
	0x0f, 0xa0, 0x35, 0x44, 0x6d, 0xa4, 0xb7, 0xaa, 0xca, 0x9b, 0x9d, 0x9f, 0x41, 0x67, 0x88, 0x9a,
	0xb9, 0x97, 0x2f, 0xd8, 0xad, 0xf8, 0xd0, 0x33, 0xb9, 0x19, 0xf4, 0x10, 0xfc, 0x21, 0xea, 0x97,
	0xf6, 0xed, 0xbb, 0xfe, 0x08, 0x8f, 0xcd, 0x1e, 0x47, 0xc5, 0x83, 0x78, 0x3d, 0xe0, 0x39, 0xec,
	0x51, 0x46, 0x3c, 0xc6, 0x97, 0xe5, 0x93, 0x78, 0x13, 0xa6, 0xba, 0x0e, 0xf5, 0x95, 0x51, 0xef,
	0xeb, 0x11, 0x03, 0x80, 0x13, 0xd4, 0x85, 0x42, 0x14, 0x67, 0x2f, 0x7e, 0x53, 0x36, 0x63, 0xde,
	0x85, 0xdd, 0x13, 0xd4, 0x27, 0x69, 0x3e, 0xe2, 0xa9, 0x13, 0xc2, 0x2b, 0xc0, 0x2a, 0x8b, 0xe4,
	0x63, 0x38, 0xd8, 0x39, 0x41, 0x5d, 0x51, 0xcf, 0x95, 0xec, 0x36, 0x00, 0x8e, 0x60, 0xdf, 0x01,
	0xd6, 0x95, 0x6c, 0x05, 0xd9, 0xab, 0x18, 0x6b, 0x8e, 0xd1, 0x56, 0xf0, 0x19, 0xf4, 0xaa, 0x0a,
	0xb5, 0x16, 0x28, 0xa8, 0x60, 0x9d, 0x4b, 0x2f, 0xbc, 0x3a, 0x57, 0x1e, 0xfd, 0x29, 0xd5, 0x91,
	0xc4, 0x98, 0x16, 0xd7, 0xf8, 0xbd, 0xe3, 0x8c, 0xaa, 0x5a, 0x47, 0x5b, 0xc1, 0x7d, 0x68, 0x9d,
	0xa0, 0x36, 0xc2, 0x7f, 0x85, 0xa5, 0x4e, 0xe5, 0xd0, 0x86, 0xd8, 0x1d, 0xe7, 0x3a, 0xd4, 0x12,
	0x79, 0x16, 0x94, 0x21, 0x2b, 0xcf, 0xff, 0x1a, 0xe8, 0x89, 0x17, 0x7c, 0x48, 0x55, 0xb7, 0xcf,
	0xbf, 0xb9, 0x24, 0xc5, 0x0b, 0xbd, 0xf6, 0x4f, 0x50, 0x16, 0x73, 0x59, 0x02, 0xdb, 0x99, 0xcc,
	0xfe, 0x6f, 0xfc, 0xf7, 0x6d, 0x5c, 0xfe, 0x69, 0x46, 0x5b, 0x83, 0x3f, 0x3c, 0xfb, 0xb3, 0x74,
	0x2c, 0x94, 0x0e, 0x1e, 0x42, 0xc3, 0x88, 0x66, 0x70, 0xab, 0x92, 0x14, 0x9d, 0xac, 0x20, 0xb6,
	0x22, 0xa9, 0xe6, 0xe6, 0x37, 0x19, 0x2e, 0x50, 0xea, 0x1b, 0xfa, 0x0f, 0xa0, 0xe9, 0xde, 0x94,
	0xbb, 0xe5, 0x7a, 0x45, 0x33, 0x7b, 0x7b, 0x2b, 0xb3, 0x24, 0xab, 0x5b, 0x26, 0x25, 0xd4, 0xf3,
	0xd9, 0xcd, 0xb6, 0xf8, 0x78, 0xef, 0xf7, 0xcb, 0x03, 0xef, 0xcf, 0xcb, 0x03, 0xef, 0xaf, 0xcb,
	0x03, 0xef, 0xd7, 0xbf, 0x0f, 0xb6, 0x46, 0x4d, 0xe3, 0xf6, 0xec, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf9, 0x39, 0x3e, 0x89, 0xcb, 0x0b, 0x00, 0x00,
}
