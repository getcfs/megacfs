// Code generated by protoc-gen-go.
// source: formic_api.proto
// DO NOT EDIT!

/*
Package newproto is a generated protocol buffer package.

It is generated from these files:
	formic_api.proto

It has these top-level messages:
	CreateRequest
	CreateResponse
	Attr
	GetAttrRequest
	GetAttrResponse
	GetxattrRequest
	GetxattrResponse
	ListxattrRequest
	ListxattrResponse
	LookupRequest
	LookupResponse
	MkDirRequest
	MkDirResponse
	ReadlinkRequest
	ReadlinkResponse
	ReadDirAllRequest
	ReadDirAllResponse
	DirEnt
	ReadRequest
	ReadResponse
	RemoveRequest
	RemoveResponse
	SetAttrRequest
	SetAttrResponse
	SetxattrRequest
	SetxattrResponse
	SymlinkRequest
	SymlinkResponse
	WriteRequest
	WriteResponse
*/
package newproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	Rpcid  uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=parent" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Attr   *Attr  `protobuf:"bytes,4,opt,name=attr" json:"attr,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *CreateRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

type CreateResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Attr  *Attr  `protobuf:"bytes,3,opt,name=attr" json:"attr,omitempty"`
	Err   string `protobuf:"bytes,4,opt,name=err" json:"err,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *CreateResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *CreateResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type Attr struct {
	Inode  uint64 `protobuf:"varint,1,opt,name=inode" json:"inode,omitempty"`
	Atime  int64  `protobuf:"varint,2,opt,name=atime" json:"atime,omitempty"`
	Mtime  int64  `protobuf:"varint,3,opt,name=mtime" json:"mtime,omitempty"`
	Ctime  int64  `protobuf:"varint,4,opt,name=ctime" json:"ctime,omitempty"`
	Crtime int64  `protobuf:"varint,5,opt,name=crtime" json:"crtime,omitempty"`
	Mode   uint32 `protobuf:"varint,6,opt,name=mode" json:"mode,omitempty"`
	Valid  int32  `protobuf:"varint,7,opt,name=valid" json:"valid,omitempty"`
	Size   uint64 `protobuf:"varint,8,opt,name=size" json:"size,omitempty"`
	Uid    uint32 `protobuf:"varint,9,opt,name=uid" json:"uid,omitempty"`
	Gid    uint32 `protobuf:"varint,10,opt,name=gid" json:"gid,omitempty"`
}

func (m *Attr) Reset()                    { *m = Attr{} }
func (m *Attr) String() string            { return proto.CompactTextString(m) }
func (*Attr) ProtoMessage()               {}
func (*Attr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Attr) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *Attr) GetAtime() int64 {
	if m != nil {
		return m.Atime
	}
	return 0
}

func (m *Attr) GetMtime() int64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *Attr) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Attr) GetCrtime() int64 {
	if m != nil {
		return m.Crtime
	}
	return 0
}

func (m *Attr) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Attr) GetValid() int32 {
	if m != nil {
		return m.Valid
	}
	return 0
}

func (m *Attr) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Attr) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Attr) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

type GetAttrRequest struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Inode uint64 `protobuf:"varint,2,opt,name=inode" json:"inode,omitempty"`
}

func (m *GetAttrRequest) Reset()                    { *m = GetAttrRequest{} }
func (m *GetAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAttrRequest) ProtoMessage()               {}
func (*GetAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetAttrRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *GetAttrRequest) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type GetAttrResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Attr  *Attr  `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *GetAttrResponse) Reset()                    { *m = GetAttrResponse{} }
func (m *GetAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAttrResponse) ProtoMessage()               {}
func (*GetAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetAttrResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *GetAttrResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *GetAttrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetxattrRequest struct {
	Rpcid    uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Inode    uint64 `protobuf:"varint,2,opt,name=inode" json:"inode,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Size     uint32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Position uint32 `protobuf:"varint,5,opt,name=position" json:"position,omitempty"`
}

func (m *GetxattrRequest) Reset()                    { *m = GetxattrRequest{} }
func (m *GetxattrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetxattrRequest) ProtoMessage()               {}
func (*GetxattrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetxattrRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *GetxattrRequest) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *GetxattrRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetxattrRequest) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GetxattrRequest) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type GetxattrResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Xattr []byte `protobuf:"bytes,2,opt,name=xattr,proto3" json:"xattr,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *GetxattrResponse) Reset()                    { *m = GetxattrResponse{} }
func (m *GetxattrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetxattrResponse) ProtoMessage()               {}
func (*GetxattrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetxattrResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *GetxattrResponse) GetXattr() []byte {
	if m != nil {
		return m.Xattr
	}
	return nil
}

func (m *GetxattrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ListxattrRequest struct {
	Rpcid    uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Inode    uint64 `protobuf:"varint,2,opt,name=inode" json:"inode,omitempty"`
	Size     uint32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Position uint32 `protobuf:"varint,4,opt,name=position" json:"position,omitempty"`
}

func (m *ListxattrRequest) Reset()                    { *m = ListxattrRequest{} }
func (m *ListxattrRequest) String() string            { return proto.CompactTextString(m) }
func (*ListxattrRequest) ProtoMessage()               {}
func (*ListxattrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListxattrRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *ListxattrRequest) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *ListxattrRequest) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ListxattrRequest) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type ListxattrResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Xattr []byte `protobuf:"bytes,2,opt,name=xattr,proto3" json:"xattr,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *ListxattrResponse) Reset()                    { *m = ListxattrResponse{} }
func (m *ListxattrResponse) String() string            { return proto.CompactTextString(m) }
func (*ListxattrResponse) ProtoMessage()               {}
func (*ListxattrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListxattrResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *ListxattrResponse) GetXattr() []byte {
	if m != nil {
		return m.Xattr
	}
	return nil
}

func (m *ListxattrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type LookupRequest struct {
	Rpcid  uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=parent" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *LookupRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *LookupRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *LookupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LookupResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Attr  *Attr  `protobuf:"bytes,3,opt,name=attr" json:"attr,omitempty"`
	Err   string `protobuf:"bytes,4,opt,name=err" json:"err,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LookupResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *LookupResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LookupResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *LookupResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type MkDirRequest struct {
	Rpcid  uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=parent" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Attr   *Attr  `protobuf:"bytes,4,opt,name=attr" json:"attr,omitempty"`
}

func (m *MkDirRequest) Reset()                    { *m = MkDirRequest{} }
func (m *MkDirRequest) String() string            { return proto.CompactTextString(m) }
func (*MkDirRequest) ProtoMessage()               {}
func (*MkDirRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MkDirRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *MkDirRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *MkDirRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MkDirRequest) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

type MkDirResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Attr  *Attr  `protobuf:"bytes,3,opt,name=attr" json:"attr,omitempty"`
	Err   string `protobuf:"bytes,4,opt,name=err" json:"err,omitempty"`
}

func (m *MkDirResponse) Reset()                    { *m = MkDirResponse{} }
func (m *MkDirResponse) String() string            { return proto.CompactTextString(m) }
func (*MkDirResponse) ProtoMessage()               {}
func (*MkDirResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MkDirResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *MkDirResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MkDirResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *MkDirResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ReadlinkRequest struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Inode uint64 `protobuf:"varint,2,opt,name=inode" json:"inode,omitempty"`
}

func (m *ReadlinkRequest) Reset()                    { *m = ReadlinkRequest{} }
func (m *ReadlinkRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadlinkRequest) ProtoMessage()               {}
func (*ReadlinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReadlinkRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *ReadlinkRequest) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type ReadlinkResponse struct {
	Rpcid  uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Err    string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *ReadlinkResponse) Reset()                    { *m = ReadlinkResponse{} }
func (m *ReadlinkResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadlinkResponse) ProtoMessage()               {}
func (*ReadlinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReadlinkResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *ReadlinkResponse) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ReadlinkResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ReadDirAllRequest struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Inode uint64 `protobuf:"varint,2,opt,name=inode" json:"inode,omitempty"`
}

func (m *ReadDirAllRequest) Reset()                    { *m = ReadDirAllRequest{} }
func (m *ReadDirAllRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadDirAllRequest) ProtoMessage()               {}
func (*ReadDirAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReadDirAllRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *ReadDirAllRequest) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type ReadDirAllResponse struct {
	Rpcid      uint32    `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Direntries []*DirEnt `protobuf:"bytes,2,rep,name=direntries" json:"direntries,omitempty"`
	Err        string    `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *ReadDirAllResponse) Reset()                    { *m = ReadDirAllResponse{} }
func (m *ReadDirAllResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadDirAllResponse) ProtoMessage()               {}
func (*ReadDirAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReadDirAllResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *ReadDirAllResponse) GetDirentries() []*DirEnt {
	if m != nil {
		return m.Direntries
	}
	return nil
}

func (m *ReadDirAllResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type DirEnt struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type uint32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (m *DirEnt) Reset()                    { *m = DirEnt{} }
func (m *DirEnt) String() string            { return proto.CompactTextString(m) }
func (*DirEnt) ProtoMessage()               {}
func (*DirEnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DirEnt) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DirEnt) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ReadRequest struct {
	Rpcid  uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Inode  uint64 `protobuf:"varint,2,opt,name=inode" json:"inode,omitempty"`
	Offset int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Size   int64  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ReadRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *ReadRequest) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *ReadRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ReadResponse struct {
	Rpcid   uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Err     string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReadResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *ReadResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ReadResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type RemoveRequest struct {
	Rpcid  uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=parent" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RemoveRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *RemoveRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *RemoveRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RemoveResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RemoveResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *RemoveResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type SetAttrRequest struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Attr  *Attr  `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
	Valid uint32 `protobuf:"varint,3,opt,name=valid" json:"valid,omitempty"`
}

func (m *SetAttrRequest) Reset()                    { *m = SetAttrRequest{} }
func (m *SetAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*SetAttrRequest) ProtoMessage()               {}
func (*SetAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SetAttrRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *SetAttrRequest) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *SetAttrRequest) GetValid() uint32 {
	if m != nil {
		return m.Valid
	}
	return 0
}

type SetAttrResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Attr  *Attr  `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *SetAttrResponse) Reset()                    { *m = SetAttrResponse{} }
func (m *SetAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*SetAttrResponse) ProtoMessage()               {}
func (*SetAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *SetAttrResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *SetAttrResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *SetAttrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type SetxattrRequest struct {
	Rpcid    uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Inode    uint64 `protobuf:"varint,2,opt,name=inode" json:"inode,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Value    []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Position uint32 `protobuf:"varint,5,opt,name=position" json:"position,omitempty"`
	Flags    uint32 `protobuf:"varint,6,opt,name=flags" json:"flags,omitempty"`
}

func (m *SetxattrRequest) Reset()                    { *m = SetxattrRequest{} }
func (m *SetxattrRequest) String() string            { return proto.CompactTextString(m) }
func (*SetxattrRequest) ProtoMessage()               {}
func (*SetxattrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *SetxattrRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *SetxattrRequest) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *SetxattrRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetxattrRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SetxattrRequest) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SetxattrRequest) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type SetxattrResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *SetxattrResponse) Reset()                    { *m = SetxattrResponse{} }
func (m *SetxattrResponse) String() string            { return proto.CompactTextString(m) }
func (*SetxattrResponse) ProtoMessage()               {}
func (*SetxattrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *SetxattrResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *SetxattrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type SymlinkRequest struct {
	Rpcid  uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=parent" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Target string `protobuf:"bytes,4,opt,name=target" json:"target,omitempty"`
	Uid    uint32 `protobuf:"varint,5,opt,name=uid" json:"uid,omitempty"`
	Gid    uint32 `protobuf:"varint,6,opt,name=gid" json:"gid,omitempty"`
}

func (m *SymlinkRequest) Reset()                    { *m = SymlinkRequest{} }
func (m *SymlinkRequest) String() string            { return proto.CompactTextString(m) }
func (*SymlinkRequest) ProtoMessage()               {}
func (*SymlinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SymlinkRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *SymlinkRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *SymlinkRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SymlinkRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *SymlinkRequest) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SymlinkRequest) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

type SymlinkResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Attr  *Attr  `protobuf:"bytes,4,opt,name=attr" json:"attr,omitempty"`
	Err   string `protobuf:"bytes,5,opt,name=err" json:"err,omitempty"`
}

func (m *SymlinkResponse) Reset()                    { *m = SymlinkResponse{} }
func (m *SymlinkResponse) String() string            { return proto.CompactTextString(m) }
func (*SymlinkResponse) ProtoMessage()               {}
func (*SymlinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SymlinkResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *SymlinkResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *SymlinkResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type WriteRequest struct {
	Rpcid   uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Inode   uint64 `protobuf:"varint,2,opt,name=inode" json:"inode,omitempty"`
	Offset  int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *WriteRequest) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *WriteRequest) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *WriteRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *WriteRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type WriteResponse struct {
	Rpcid uint32 `protobuf:"varint,1,opt,name=rpcid" json:"rpcid,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *WriteResponse) GetRpcid() uint32 {
	if m != nil {
		return m.Rpcid
	}
	return 0
}

func (m *WriteResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "newproto.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "newproto.CreateResponse")
	proto.RegisterType((*Attr)(nil), "newproto.Attr")
	proto.RegisterType((*GetAttrRequest)(nil), "newproto.GetAttrRequest")
	proto.RegisterType((*GetAttrResponse)(nil), "newproto.GetAttrResponse")
	proto.RegisterType((*GetxattrRequest)(nil), "newproto.GetxattrRequest")
	proto.RegisterType((*GetxattrResponse)(nil), "newproto.GetxattrResponse")
	proto.RegisterType((*ListxattrRequest)(nil), "newproto.ListxattrRequest")
	proto.RegisterType((*ListxattrResponse)(nil), "newproto.ListxattrResponse")
	proto.RegisterType((*LookupRequest)(nil), "newproto.LookupRequest")
	proto.RegisterType((*LookupResponse)(nil), "newproto.LookupResponse")
	proto.RegisterType((*MkDirRequest)(nil), "newproto.MkDirRequest")
	proto.RegisterType((*MkDirResponse)(nil), "newproto.MkDirResponse")
	proto.RegisterType((*ReadlinkRequest)(nil), "newproto.ReadlinkRequest")
	proto.RegisterType((*ReadlinkResponse)(nil), "newproto.ReadlinkResponse")
	proto.RegisterType((*ReadDirAllRequest)(nil), "newproto.ReadDirAllRequest")
	proto.RegisterType((*ReadDirAllResponse)(nil), "newproto.ReadDirAllResponse")
	proto.RegisterType((*DirEnt)(nil), "newproto.DirEnt")
	proto.RegisterType((*ReadRequest)(nil), "newproto.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "newproto.ReadResponse")
	proto.RegisterType((*RemoveRequest)(nil), "newproto.RemoveRequest")
	proto.RegisterType((*RemoveResponse)(nil), "newproto.RemoveResponse")
	proto.RegisterType((*SetAttrRequest)(nil), "newproto.SetAttrRequest")
	proto.RegisterType((*SetAttrResponse)(nil), "newproto.SetAttrResponse")
	proto.RegisterType((*SetxattrRequest)(nil), "newproto.SetxattrRequest")
	proto.RegisterType((*SetxattrResponse)(nil), "newproto.SetxattrResponse")
	proto.RegisterType((*SymlinkRequest)(nil), "newproto.SymlinkRequest")
	proto.RegisterType((*SymlinkResponse)(nil), "newproto.SymlinkResponse")
	proto.RegisterType((*WriteRequest)(nil), "newproto.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "newproto.WriteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Formic service

type FormicClient interface {
	Create(ctx context.Context, opts ...grpc.CallOption) (Formic_CreateClient, error)
	GetAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_GetAttrClient, error)
	Getxattr(ctx context.Context, opts ...grpc.CallOption) (Formic_GetxattrClient, error)
	Listxattr(ctx context.Context, opts ...grpc.CallOption) (Formic_ListxattrClient, error)
	Lookup(ctx context.Context, opts ...grpc.CallOption) (Formic_LookupClient, error)
	MkDir(ctx context.Context, opts ...grpc.CallOption) (Formic_MkDirClient, error)
	ReadDirAll(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadDirAllClient, error)
	Readlink(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadlinkClient, error)
	Read(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadClient, error)
	Remove(ctx context.Context, opts ...grpc.CallOption) (Formic_RemoveClient, error)
	SetAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_SetAttrClient, error)
	Setxattr(ctx context.Context, opts ...grpc.CallOption) (Formic_SetxattrClient, error)
	Symlink(ctx context.Context, opts ...grpc.CallOption) (Formic_SymlinkClient, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Formic_WriteClient, error)
}

type formicClient struct {
	cc *grpc.ClientConn
}

func NewFormicClient(cc *grpc.ClientConn) FormicClient {
	return &formicClient{cc}
}

func (c *formicClient) Create(ctx context.Context, opts ...grpc.CallOption) (Formic_CreateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[0], c.cc, "/newproto.Formic/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicCreateClient{stream}
	return x, nil
}

type Formic_CreateClient interface {
	Send(*CreateRequest) error
	Recv() (*CreateResponse, error)
	grpc.ClientStream
}

type formicCreateClient struct {
	grpc.ClientStream
}

func (x *formicCreateClient) Send(m *CreateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicCreateClient) Recv() (*CreateResponse, error) {
	m := new(CreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) GetAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_GetAttrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[1], c.cc, "/newproto.Formic/GetAttr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicGetAttrClient{stream}
	return x, nil
}

type Formic_GetAttrClient interface {
	Send(*GetAttrRequest) error
	Recv() (*GetAttrResponse, error)
	grpc.ClientStream
}

type formicGetAttrClient struct {
	grpc.ClientStream
}

func (x *formicGetAttrClient) Send(m *GetAttrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicGetAttrClient) Recv() (*GetAttrResponse, error) {
	m := new(GetAttrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Getxattr(ctx context.Context, opts ...grpc.CallOption) (Formic_GetxattrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[2], c.cc, "/newproto.Formic/Getxattr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicGetxattrClient{stream}
	return x, nil
}

type Formic_GetxattrClient interface {
	Send(*GetxattrRequest) error
	Recv() (*GetxattrResponse, error)
	grpc.ClientStream
}

type formicGetxattrClient struct {
	grpc.ClientStream
}

func (x *formicGetxattrClient) Send(m *GetxattrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicGetxattrClient) Recv() (*GetxattrResponse, error) {
	m := new(GetxattrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Listxattr(ctx context.Context, opts ...grpc.CallOption) (Formic_ListxattrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[3], c.cc, "/newproto.Formic/Listxattr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicListxattrClient{stream}
	return x, nil
}

type Formic_ListxattrClient interface {
	Send(*ListxattrRequest) error
	Recv() (*ListxattrResponse, error)
	grpc.ClientStream
}

type formicListxattrClient struct {
	grpc.ClientStream
}

func (x *formicListxattrClient) Send(m *ListxattrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicListxattrClient) Recv() (*ListxattrResponse, error) {
	m := new(ListxattrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Lookup(ctx context.Context, opts ...grpc.CallOption) (Formic_LookupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[4], c.cc, "/newproto.Formic/Lookup", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicLookupClient{stream}
	return x, nil
}

type Formic_LookupClient interface {
	Send(*LookupRequest) error
	Recv() (*LookupResponse, error)
	grpc.ClientStream
}

type formicLookupClient struct {
	grpc.ClientStream
}

func (x *formicLookupClient) Send(m *LookupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicLookupClient) Recv() (*LookupResponse, error) {
	m := new(LookupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) MkDir(ctx context.Context, opts ...grpc.CallOption) (Formic_MkDirClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[5], c.cc, "/newproto.Formic/MkDir", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicMkDirClient{stream}
	return x, nil
}

type Formic_MkDirClient interface {
	Send(*MkDirRequest) error
	Recv() (*MkDirResponse, error)
	grpc.ClientStream
}

type formicMkDirClient struct {
	grpc.ClientStream
}

func (x *formicMkDirClient) Send(m *MkDirRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicMkDirClient) Recv() (*MkDirResponse, error) {
	m := new(MkDirResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) ReadDirAll(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadDirAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[6], c.cc, "/newproto.Formic/ReadDirAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicReadDirAllClient{stream}
	return x, nil
}

type Formic_ReadDirAllClient interface {
	Send(*ReadDirAllRequest) error
	Recv() (*ReadDirAllResponse, error)
	grpc.ClientStream
}

type formicReadDirAllClient struct {
	grpc.ClientStream
}

func (x *formicReadDirAllClient) Send(m *ReadDirAllRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicReadDirAllClient) Recv() (*ReadDirAllResponse, error) {
	m := new(ReadDirAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Readlink(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadlinkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[7], c.cc, "/newproto.Formic/Readlink", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicReadlinkClient{stream}
	return x, nil
}

type Formic_ReadlinkClient interface {
	Send(*ReadlinkRequest) error
	Recv() (*ReadlinkResponse, error)
	grpc.ClientStream
}

type formicReadlinkClient struct {
	grpc.ClientStream
}

func (x *formicReadlinkClient) Send(m *ReadlinkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicReadlinkClient) Recv() (*ReadlinkResponse, error) {
	m := new(ReadlinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Read(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[8], c.cc, "/newproto.Formic/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicReadClient{stream}
	return x, nil
}

type Formic_ReadClient interface {
	Send(*ReadRequest) error
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type formicReadClient struct {
	grpc.ClientStream
}

func (x *formicReadClient) Send(m *ReadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Remove(ctx context.Context, opts ...grpc.CallOption) (Formic_RemoveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[9], c.cc, "/newproto.Formic/Remove", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicRemoveClient{stream}
	return x, nil
}

type Formic_RemoveClient interface {
	Send(*RemoveRequest) error
	Recv() (*RemoveResponse, error)
	grpc.ClientStream
}

type formicRemoveClient struct {
	grpc.ClientStream
}

func (x *formicRemoveClient) Send(m *RemoveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicRemoveClient) Recv() (*RemoveResponse, error) {
	m := new(RemoveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) SetAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_SetAttrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[10], c.cc, "/newproto.Formic/SetAttr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicSetAttrClient{stream}
	return x, nil
}

type Formic_SetAttrClient interface {
	Send(*SetAttrRequest) error
	Recv() (*SetAttrResponse, error)
	grpc.ClientStream
}

type formicSetAttrClient struct {
	grpc.ClientStream
}

func (x *formicSetAttrClient) Send(m *SetAttrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicSetAttrClient) Recv() (*SetAttrResponse, error) {
	m := new(SetAttrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Setxattr(ctx context.Context, opts ...grpc.CallOption) (Formic_SetxattrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[11], c.cc, "/newproto.Formic/Setxattr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicSetxattrClient{stream}
	return x, nil
}

type Formic_SetxattrClient interface {
	Send(*SetxattrRequest) error
	Recv() (*SetxattrResponse, error)
	grpc.ClientStream
}

type formicSetxattrClient struct {
	grpc.ClientStream
}

func (x *formicSetxattrClient) Send(m *SetxattrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicSetxattrClient) Recv() (*SetxattrResponse, error) {
	m := new(SetxattrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Symlink(ctx context.Context, opts ...grpc.CallOption) (Formic_SymlinkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[12], c.cc, "/newproto.Formic/Symlink", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicSymlinkClient{stream}
	return x, nil
}

type Formic_SymlinkClient interface {
	Send(*SymlinkRequest) error
	Recv() (*SymlinkResponse, error)
	grpc.ClientStream
}

type formicSymlinkClient struct {
	grpc.ClientStream
}

func (x *formicSymlinkClient) Send(m *SymlinkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicSymlinkClient) Recv() (*SymlinkResponse, error) {
	m := new(SymlinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Write(ctx context.Context, opts ...grpc.CallOption) (Formic_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[13], c.cc, "/newproto.Formic/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicWriteClient{stream}
	return x, nil
}

type Formic_WriteClient interface {
	Send(*WriteRequest) error
	Recv() (*WriteResponse, error)
	grpc.ClientStream
}

type formicWriteClient struct {
	grpc.ClientStream
}

func (x *formicWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicWriteClient) Recv() (*WriteResponse, error) {
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Formic service

type FormicServer interface {
	Create(Formic_CreateServer) error
	GetAttr(Formic_GetAttrServer) error
	Getxattr(Formic_GetxattrServer) error
	Listxattr(Formic_ListxattrServer) error
	Lookup(Formic_LookupServer) error
	MkDir(Formic_MkDirServer) error
	ReadDirAll(Formic_ReadDirAllServer) error
	Readlink(Formic_ReadlinkServer) error
	Read(Formic_ReadServer) error
	Remove(Formic_RemoveServer) error
	SetAttr(Formic_SetAttrServer) error
	Setxattr(Formic_SetxattrServer) error
	Symlink(Formic_SymlinkServer) error
	Write(Formic_WriteServer) error
}

func RegisterFormicServer(s *grpc.Server, srv FormicServer) {
	s.RegisterService(&_Formic_serviceDesc, srv)
}

func _Formic_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Create(&formicCreateServer{stream})
}

type Formic_CreateServer interface {
	Send(*CreateResponse) error
	Recv() (*CreateRequest, error)
	grpc.ServerStream
}

type formicCreateServer struct {
	grpc.ServerStream
}

func (x *formicCreateServer) Send(m *CreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicCreateServer) Recv() (*CreateRequest, error) {
	m := new(CreateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_GetAttr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).GetAttr(&formicGetAttrServer{stream})
}

type Formic_GetAttrServer interface {
	Send(*GetAttrResponse) error
	Recv() (*GetAttrRequest, error)
	grpc.ServerStream
}

type formicGetAttrServer struct {
	grpc.ServerStream
}

func (x *formicGetAttrServer) Send(m *GetAttrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicGetAttrServer) Recv() (*GetAttrRequest, error) {
	m := new(GetAttrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Getxattr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Getxattr(&formicGetxattrServer{stream})
}

type Formic_GetxattrServer interface {
	Send(*GetxattrResponse) error
	Recv() (*GetxattrRequest, error)
	grpc.ServerStream
}

type formicGetxattrServer struct {
	grpc.ServerStream
}

func (x *formicGetxattrServer) Send(m *GetxattrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicGetxattrServer) Recv() (*GetxattrRequest, error) {
	m := new(GetxattrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Listxattr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Listxattr(&formicListxattrServer{stream})
}

type Formic_ListxattrServer interface {
	Send(*ListxattrResponse) error
	Recv() (*ListxattrRequest, error)
	grpc.ServerStream
}

type formicListxattrServer struct {
	grpc.ServerStream
}

func (x *formicListxattrServer) Send(m *ListxattrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicListxattrServer) Recv() (*ListxattrRequest, error) {
	m := new(ListxattrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Lookup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Lookup(&formicLookupServer{stream})
}

type Formic_LookupServer interface {
	Send(*LookupResponse) error
	Recv() (*LookupRequest, error)
	grpc.ServerStream
}

type formicLookupServer struct {
	grpc.ServerStream
}

func (x *formicLookupServer) Send(m *LookupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicLookupServer) Recv() (*LookupRequest, error) {
	m := new(LookupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_MkDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).MkDir(&formicMkDirServer{stream})
}

type Formic_MkDirServer interface {
	Send(*MkDirResponse) error
	Recv() (*MkDirRequest, error)
	grpc.ServerStream
}

type formicMkDirServer struct {
	grpc.ServerStream
}

func (x *formicMkDirServer) Send(m *MkDirResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicMkDirServer) Recv() (*MkDirRequest, error) {
	m := new(MkDirRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_ReadDirAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).ReadDirAll(&formicReadDirAllServer{stream})
}

type Formic_ReadDirAllServer interface {
	Send(*ReadDirAllResponse) error
	Recv() (*ReadDirAllRequest, error)
	grpc.ServerStream
}

type formicReadDirAllServer struct {
	grpc.ServerStream
}

func (x *formicReadDirAllServer) Send(m *ReadDirAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicReadDirAllServer) Recv() (*ReadDirAllRequest, error) {
	m := new(ReadDirAllRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Readlink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Readlink(&formicReadlinkServer{stream})
}

type Formic_ReadlinkServer interface {
	Send(*ReadlinkResponse) error
	Recv() (*ReadlinkRequest, error)
	grpc.ServerStream
}

type formicReadlinkServer struct {
	grpc.ServerStream
}

func (x *formicReadlinkServer) Send(m *ReadlinkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicReadlinkServer) Recv() (*ReadlinkRequest, error) {
	m := new(ReadlinkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Read(&formicReadServer{stream})
}

type Formic_ReadServer interface {
	Send(*ReadResponse) error
	Recv() (*ReadRequest, error)
	grpc.ServerStream
}

type formicReadServer struct {
	grpc.ServerStream
}

func (x *formicReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicReadServer) Recv() (*ReadRequest, error) {
	m := new(ReadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Remove_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Remove(&formicRemoveServer{stream})
}

type Formic_RemoveServer interface {
	Send(*RemoveResponse) error
	Recv() (*RemoveRequest, error)
	grpc.ServerStream
}

type formicRemoveServer struct {
	grpc.ServerStream
}

func (x *formicRemoveServer) Send(m *RemoveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicRemoveServer) Recv() (*RemoveRequest, error) {
	m := new(RemoveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_SetAttr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).SetAttr(&formicSetAttrServer{stream})
}

type Formic_SetAttrServer interface {
	Send(*SetAttrResponse) error
	Recv() (*SetAttrRequest, error)
	grpc.ServerStream
}

type formicSetAttrServer struct {
	grpc.ServerStream
}

func (x *formicSetAttrServer) Send(m *SetAttrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicSetAttrServer) Recv() (*SetAttrRequest, error) {
	m := new(SetAttrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Setxattr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Setxattr(&formicSetxattrServer{stream})
}

type Formic_SetxattrServer interface {
	Send(*SetxattrResponse) error
	Recv() (*SetxattrRequest, error)
	grpc.ServerStream
}

type formicSetxattrServer struct {
	grpc.ServerStream
}

func (x *formicSetxattrServer) Send(m *SetxattrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicSetxattrServer) Recv() (*SetxattrRequest, error) {
	m := new(SetxattrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Symlink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Symlink(&formicSymlinkServer{stream})
}

type Formic_SymlinkServer interface {
	Send(*SymlinkResponse) error
	Recv() (*SymlinkRequest, error)
	grpc.ServerStream
}

type formicSymlinkServer struct {
	grpc.ServerStream
}

func (x *formicSymlinkServer) Send(m *SymlinkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicSymlinkServer) Recv() (*SymlinkRequest, error) {
	m := new(SymlinkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Write(&formicWriteServer{stream})
}

type Formic_WriteServer interface {
	Send(*WriteResponse) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type formicWriteServer struct {
	grpc.ServerStream
}

func (x *formicWriteServer) Send(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Formic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "newproto.Formic",
	HandlerType: (*FormicServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _Formic_Create_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAttr",
			Handler:       _Formic_GetAttr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Getxattr",
			Handler:       _Formic_Getxattr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Listxattr",
			Handler:       _Formic_Listxattr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Lookup",
			Handler:       _Formic_Lookup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MkDir",
			Handler:       _Formic_MkDir_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadDirAll",
			Handler:       _Formic_ReadDirAll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Readlink",
			Handler:       _Formic_Readlink_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _Formic_Read_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Remove",
			Handler:       _Formic_Remove_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetAttr",
			Handler:       _Formic_SetAttr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Setxattr",
			Handler:       _Formic_Setxattr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Symlink",
			Handler:       _Formic_Symlink_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _Formic_Write_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "formic_api.proto",
}

func init() { proto.RegisterFile("formic_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 947 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x8f, 0xe3, 0x34,
	0x14, 0x27, 0x4d, 0x9a, 0x99, 0xbe, 0x69, 0xbb, 0x5d, 0x6b, 0xe9, 0x86, 0xc0, 0xa1, 0xca, 0xa9,
	0xa7, 0xd1, 0x68, 0x38, 0x80, 0xf8, 0xab, 0x8a, 0xc2, 0x4a, 0x68, 0x57, 0xda, 0x75, 0x0e, 0x9c,
	0x10, 0x84, 0xc6, 0xad, 0xac, 0x69, 0x93, 0x90, 0xb8, 0xcb, 0x0e, 0x37, 0xbe, 0x00, 0x77, 0xbe,
	0x18, 0xe2, 0xe3, 0x20, 0xdb, 0xf9, 0x63, 0xa7, 0x69, 0xda, 0x29, 0x65, 0x6e, 0x7e, 0xcf, 0xf6,
	0xfb, 0xff, 0xde, 0xef, 0xc1, 0x68, 0x19, 0xa7, 0x1b, 0xba, 0xf8, 0x29, 0x48, 0xe8, 0x75, 0x92,
	0xc6, 0x2c, 0x46, 0x97, 0x11, 0xf9, 0x4d, 0x9c, 0xbc, 0x2d, 0x0c, 0xbe, 0x49, 0x49, 0xc0, 0x08,
	0x26, 0xbf, 0x6e, 0x49, 0xc6, 0xd0, 0x33, 0xe8, 0xa6, 0xc9, 0x82, 0x86, 0x8e, 0x31, 0x31, 0xa6,
	0x03, 0x2c, 0x09, 0x34, 0x06, 0x3b, 0x09, 0x52, 0x12, 0x31, 0xa7, 0x33, 0x31, 0xa6, 0x16, 0xce,
	0x29, 0x84, 0xc0, 0x8a, 0x82, 0x0d, 0x71, 0xcc, 0x89, 0x31, 0xed, 0x61, 0x71, 0x46, 0x1e, 0x58,
	0x01, 0x63, 0xa9, 0x63, 0x4d, 0x8c, 0xe9, 0xd5, 0xed, 0xf0, 0xba, 0xd0, 0x75, 0x3d, 0x63, 0x2c,
	0xc5, 0xe2, 0xce, 0x4b, 0x60, 0x58, 0xa8, 0xcd, 0x92, 0x38, 0xca, 0xc8, 0x1e, 0xbd, 0x85, 0xfc,
	0x4e, 0x83, 0x7c, 0x73, 0xbf, 0x7c, 0x34, 0x02, 0x93, 0xa4, 0xd2, 0x84, 0x1e, 0xe6, 0x47, 0xef,
	0x1f, 0x03, 0x2c, 0xfe, 0x80, 0x2b, 0xa2, 0x51, 0x1c, 0x12, 0xa1, 0xc8, 0xc2, 0x92, 0xe0, 0xdc,
	0x80, 0xd1, 0x5c, 0x93, 0x89, 0x25, 0xc1, 0xb9, 0x1b, 0xc1, 0x35, 0x25, 0x77, 0x53, 0x70, 0x17,
	0x82, 0x6b, 0x49, 0xae, 0x20, 0x78, 0x88, 0x16, 0xa9, 0x60, 0x77, 0x05, 0x3b, 0xa7, 0xb8, 0x0b,
	0x1b, 0xae, 0xce, 0x16, 0x7e, 0x89, 0x33, 0x97, 0xf0, 0x36, 0x58, 0xd3, 0xd0, 0xb9, 0x98, 0x18,
	0xd3, 0x2e, 0x96, 0x04, 0x7f, 0x99, 0xd1, 0xdf, 0x89, 0x73, 0x29, 0x0c, 0x13, 0x67, 0xee, 0xc8,
	0x96, 0x86, 0x4e, 0x4f, 0x7c, 0xe6, 0x47, 0xce, 0x59, 0xd1, 0xd0, 0x01, 0xc9, 0x59, 0xd1, 0xd0,
	0xfb, 0x02, 0x86, 0x2f, 0x08, 0x13, 0xde, 0xb7, 0x26, 0xb1, 0xf4, 0xbc, 0xa3, 0x78, 0xee, 0xfd,
	0x08, 0x4f, 0xca, 0xdf, 0xad, 0xb9, 0x28, 0xe2, 0xde, 0x39, 0x1c, 0x77, 0xb3, 0x8a, 0xfb, 0x1f,
	0x86, 0x90, 0xff, 0x2e, 0x38, 0xcd, 0xbc, 0xc6, 0x0a, 0x2b, 0x02, 0x65, 0xc9, 0x90, 0x8a, 0x40,
	0xb9, 0x70, 0x99, 0xc4, 0x19, 0x65, 0x34, 0x8e, 0x44, 0x02, 0x06, 0xb8, 0xa4, 0xbd, 0xd7, 0x30,
	0xaa, 0x4c, 0x68, 0xf5, 0xf1, 0x19, 0x74, 0xdf, 0x95, 0x4e, 0xf6, 0xb1, 0x24, 0x1a, 0xbc, 0x8a,
	0x60, 0xf4, 0x92, 0x66, 0xff, 0xc9, 0x2b, 0xe1, 0x81, 0xb9, 0xc7, 0x03, 0xab, 0xe6, 0xc1, 0x1b,
	0x78, 0xaa, 0xe8, 0x3b, 0x8b, 0x0b, 0x6f, 0x60, 0xf0, 0x32, 0x8e, 0xef, 0xb6, 0xc9, 0xd9, 0x3a,
	0x9f, 0x77, 0x75, 0x21, 0xf2, 0x91, 0xba, 0x9a, 0x41, 0xff, 0xd5, 0xdd, 0x9c, 0xa6, 0x8f, 0x3b,
	0xbd, 0x62, 0x18, 0xe4, 0x5a, 0x1f, 0xc9, 0xcd, 0x2f, 0xe1, 0x09, 0x26, 0x41, 0xb8, 0xa6, 0xd1,
	0xdd, 0x29, 0x2d, 0x8e, 0x61, 0x54, 0x7d, 0x6f, 0x35, 0x79, 0x0c, 0x36, 0x0b, 0xd2, 0x15, 0x61,
	0xb9, 0xd1, 0x39, 0xd5, 0x50, 0x3e, 0x5f, 0xc3, 0x53, 0x2e, 0x73, 0x4e, 0xd3, 0xd9, 0x7a, 0x7d,
	0x8a, 0x51, 0x11, 0x20, 0x55, 0x40, 0xab, 0x59, 0x37, 0x00, 0x21, 0xe5, 0x29, 0x4b, 0x29, 0xc9,
	0x9c, 0xce, 0xc4, 0x9c, 0x5e, 0xdd, 0x8e, 0xaa, 0xd8, 0xcd, 0x69, 0xfa, 0x6d, 0xc4, 0xb0, 0xf2,
	0xa6, 0xc1, 0xe0, 0x1b, 0xb0, 0xe5, 0xbb, 0x32, 0x2f, 0x86, 0x3e, 0x52, 0xd8, 0x7d, 0x52, 0x36,
	0x24, 0x3f, 0x7b, 0x04, 0xae, 0xb8, 0x85, 0xa7, 0xf4, 0xf7, 0x18, 0xec, 0x78, 0xb9, 0xcc, 0x08,
	0xcb, 0x91, 0x23, 0xa7, 0xb4, 0xc9, 0x65, 0xca, 0xbe, 0xf7, 0x5e, 0x43, 0x5f, 0xaa, 0x69, 0x0d,
	0x81, 0x03, 0x17, 0x49, 0x70, 0xbf, 0x8e, 0x83, 0x30, 0x6f, 0xec, 0x82, 0x6c, 0x6e, 0x6d, 0x4c,
	0x36, 0xf1, 0xdb, 0xf3, 0x81, 0xba, 0xf7, 0x29, 0x0c, 0x0b, 0x91, 0xad, 0x66, 0xe6, 0xc6, 0x74,
	0x2a, 0x63, 0x7e, 0x86, 0xa1, 0x7f, 0x0c, 0x3a, 0x1d, 0x03, 0x2f, 0x25, 0x6e, 0xca, 0x34, 0x49,
	0x82, 0x23, 0x98, 0xff, 0x3f, 0x22, 0xd8, 0x5f, 0x86, 0x90, 0x7f, 0x56, 0x04, 0x93, 0x8e, 0x6c,
	0x65, 0x21, 0xf4, 0xb1, 0x24, 0xda, 0x30, 0x8c, 0xff, 0x58, 0xae, 0x83, 0x55, 0x96, 0xef, 0x11,
	0x92, 0xf0, 0x3e, 0x83, 0x91, 0x7f, 0x1c, 0xb2, 0xed, 0x26, 0xe6, 0x4f, 0x03, 0x86, 0xfe, 0xfd,
	0xe6, 0xf0, 0x50, 0x79, 0xc8, 0xf8, 0xac, 0x06, 0x88, 0x55, 0x1f, 0x20, 0x7c, 0x8f, 0xe9, 0xee,
	0xec, 0x31, 0x76, 0xb5, 0xc7, 0xf0, 0x3c, 0x16, 0xf6, 0x1c, 0x95, 0x47, 0xeb, 0x70, 0x1e, 0xbb,
	0x95, 0xbf, 0x6b, 0xe8, 0xff, 0x90, 0xd2, 0x43, 0x9b, 0xee, 0xc3, 0xfa, 0x59, 0xe9, 0x4a, 0x4b,
	0xeb, 0x4a, 0xef, 0x13, 0x18, 0xe4, 0xda, 0x1e, 0x96, 0x96, 0xdb, 0xbf, 0x2f, 0xc0, 0xfe, 0x4e,
	0x2c, 0xec, 0x68, 0x06, 0xb6, 0xdc, 0x92, 0xd1, 0xf3, 0xca, 0x47, 0x6d, 0x5d, 0x77, 0x9d, 0xdd,
	0x0b, 0xa9, 0xcf, 0x7b, 0x6f, 0x6a, 0xdc, 0x18, 0x68, 0x0e, 0x17, 0xf9, 0x76, 0x87, 0x94, 0xa7,
	0xfa, 0xba, 0xe8, 0x7e, 0xd0, 0x70, 0xa3, 0x49, 0x79, 0x01, 0x97, 0xc5, 0x02, 0x85, 0xf4, 0xc7,
	0x6a, 0x57, 0xb8, 0x6e, 0xd3, 0x95, 0x26, 0xe8, 0x7b, 0xe8, 0x95, 0x7b, 0x0c, 0x52, 0x9e, 0xd7,
	0x97, 0x29, 0xf7, 0xc3, 0xc6, 0x3b, 0x4d, 0xd6, 0x0c, 0x6c, 0xb9, 0x6d, 0xa8, 0xd1, 0xd1, 0x56,
	0x1a, 0x35, 0x3a, 0xfa, 0x62, 0x92, 0x8b, 0xf8, 0x0a, 0xba, 0x02, 0xc8, 0xd1, 0xb8, 0x7a, 0xa8,
	0xee, 0x13, 0xee, 0xf3, 0x1d, 0xbe, 0xf6, 0xff, 0x15, 0x40, 0x85, 0x61, 0x48, 0xb1, 0x79, 0x07,
	0x1a, 0xdd, 0x8f, 0x9a, 0x2f, 0xeb, 0x61, 0x2e, 0x70, 0x5a, 0x0d, 0x73, 0x0d, 0xfa, 0xd5, 0x30,
	0xd7, 0x61, 0x3d, 0x17, 0xf4, 0x39, 0x58, 0xfc, 0x06, 0xbd, 0xaf, 0xbf, 0x2c, 0x04, 0x8c, 0xeb,
	0xec, 0x7a, 0x5c, 0xe5, 0xa8, 0x57, 0xe3, 0xaa, 0xe1, 0x89, 0x1a, 0x57, 0x1d, 0x15, 0xaa, 0xaa,
	0xf3, 0x77, 0xab, 0xce, 0xdf, 0x5b, 0x75, 0xfe, 0xbe, 0xaa, 0xf3, 0x1b, 0xaa, 0xce, 0xdf, 0x5f,
	0x75, 0x7e, 0x73, 0xd5, 0x71, 0x73, 0xe4, 0x60, 0xd1, 0xcc, 0xd1, 0x66, 0x9f, 0x66, 0x8e, 0x3e,
	0x85, 0xaa, 0x62, 0x11, 0x1d, 0xad, 0x16, 0x8b, 0x3a, 0x50, 0xd4, 0x62, 0xd1, 0x5a, 0x5f, 0xfe,
	0xff, 0xc5, 0x16, 0x57, 0x1f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x06, 0x0c, 0x01, 0x4a, 0x8f,
	0x0f, 0x00, 0x00,
}
