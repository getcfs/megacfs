syntax = "proto3";

package formicproto;

// Versioning Rules
// Don't change the number tags once set
// If you remove a field, don't re-use the number tag
// If you are going to change a type, ensure that it is compatible, otherwise create a new items instead
// API Changes: (For future notes on how things have changed)

// Combined ClientApi
service Api {
}

// Attr
message Attr {
    uint64 inode  = 1;
    int64  atime  = 2;
    int64  mtime  = 3;
    int64  ctime  = 4;
    int64  crtime = 5;
    uint32 mode   = 6;
    int32  valid  = 7;
    uint64 size   = 8;
    uint32 uid    = 9;
    uint32 gid    = 10;
}

// Since this data can sit around for a while, we track a version number of the api so that it
// is easier to explicitly check what version we are using and act accordingly

// Inode
// This is used for serialization of the inode metadata
// This is *not* used for api calls
message InodeEntry {
    uint32 version            = 1;
    bool   isDir              = 2;
    Attr   attr               = 3;
    uint64 parent             = 4;
    uint64 inode              = 5;
    uint64 nodeCount          = 6;
    bool   isLink             = 7;
    string target             = 8;
    map<string, bytes>  xattr = 9; // NOTE: Probably not the best long term way to do this
    uint64 blocks             = 10;
    uint64 blockSize          = 11;
    bytes  fsId               = 13;
}

// Tombstone
// Stores information needed to keep track of deleted items
message Tombstone {
    int64  dtime  = 1; // Timestamp micro the delete request was made
    int64  qtime  = 2; // Timestamp micro of the most recent queing of delete
    bytes  fsId   = 3; // Needed to get the block IDs
    uint64 inode  = 4;
    uint64 blocks = 5; // Blocks from the original object that need to be deleted
}

// Dirty
// Stores information needed to keep track of dirty items
message Dirty {
    int64  dtime  = 1; // Timestamp micro the update was made
    int64  qtime  = 2; // Timestamp micro of the most recent queing of delete
    bytes  fsId   = 3; // Needed to get the block IDs
    uint64 inode  = 4;
    uint64 blocks = 5; // Blocks from the original object that was dirty
}

// FileBlock
// This is used for storing blocks in value store
// This is *not* used for api calls
message FileBlock {
    uint32 version  = 1;
    bytes  data     = 2;
    uint32 checksum = 3;
}

// Message service definition for the FileSystemApi
service FileSystemAPI {
  rpc CreateFS (CreateFSRequest) returns (CreateFSResponse) {}
  rpc ListFS (ListFSRequest) returns (ListFSResponse) {}
  rpc ShowFS (ShowFSRequest) returns (ShowFSResponse) {}
  rpc DeleteFS (DeleteFSRequest) returns (DeleteFSResponse) {}
  rpc UpdateFS (UpdateFSRequest) returns (UpdateFSResponse) {}
  rpc GrantAddrFS (GrantAddrFSRequest) returns (GrantAddrFSResponse) {}
  rpc RevokeAddrFS (RevokeAddrFSRequest) returns (RevokeAddrFSResponse) {}
}

// ModFS ...
message ModFS {
  string    Name         = 1;
  string    Status       = 2;
}

// Request to create a new filesystem
message CreateFSRequest {
  string  Token           = 1;
  string  FSName          = 2;
}

// Response from creating a new filesystem
message CreateFSResponse {
  string  Data        = 1;
}

// Request a list of all file systems for a given account
message ListFSRequest{
  string  Token           = 1;
}

// Response for displaying a list of all an accounts file systems.
message ListFSResponse {
  string  Data    = 1;
}

// Request to show the specific details about a file system
message ShowFSRequest{
  string  Token           = 1;
  string  FSid            = 2;
}

// Response for a specific file system for an account.
message ShowFSResponse {
  string  Data    = 1;
}

// Request to delete a specific file system
message DeleteFSRequest {
  string  Token         = 1;
  string  FSid          = 2;
}

// Response from deleting a file system
message DeleteFSResponse {
  string  Data         = 1;
}

// Request to update a specific file system's information
message UpdateFSRequest {
  string  Token           = 1;
  string  FSid            = 2;
  ModFS   Filesys         = 3;
}

// Response from an update operation
message UpdateFSResponse {
  string  Data       = 1;
}

// Request grant an ip address access to a file system
message GrantAddrFSRequest {
  string  Token      = 1;
  string  FSid       = 2;
  string  Addr       = 3;
}

// Response from granting ip address access to a file system
message GrantAddrFSResponse {
  string  Data          = 1;
}

// Request revoke an ip address access to a file system
message RevokeAddrFSRequest {
  string Token      = 1;
  string FSid       = 2;
  string Addr       = 3;
}

// Response from revoking ip address access to a file system
message RevokeAddrFSResponse {
  string  Data     = 1;
}


// TODO: Needed for now since this is used when storing in the stores.
// This really shouldn't be in this proto package.
// This is used for the serialization of dir info in the group score
// This is *not* used for api calls
message DirEntry {
    uint32    version   = 1;
    string    name      = 2;
    bytes     id        = 3;
    Tombstone tombstone = 4; // If set, this record has been deleted
    uint32    type      = 5;
}

