// Code generated by protoc-gen-go.
// source: formic_api.proto
// DO NOT EDIT!

/*
Package formicproto is a generated protocol buffer package.

It is generated from these files:
	formic_api.proto

It has these top-level messages:
	CheckRequest
	CheckResponse
	CreateFSRequest
	CreateFSResponse
	CreateRequest
	CreateResponse
	DeleteFSRequest
	DeleteFSResponse
	GetAttrRequest
	GetAttrResponse
	GetXAttrRequest
	GetXAttrResponse
	GrantAddrFSRequest
	GrantAddrFSResponse
	InitFSRequest
	InitFSResponse
	ListFSRequest
	ListFSResponse
	ListXAttrRequest
	ListXAttrResponse
	LookupRequest
	LookupResponse
	MkDirRequest
	MkDirResponse
	ReadLinkRequest
	ReadLinkResponse
	ReadDirAllRequest
	ReadDirAllResponse
	ReadDirAllEnt
	ReadRequest
	ReadResponse
	RemoveRequest
	RemoveResponse
	RemoveXAttrRequest
	RemoveXAttrResponse
	RenameRequest
	RenameResponse
	RevokeAddrFSRequest
	RevokeAddrFSResponse
	SetAttrRequest
	SetAttrResponse
	SetXAttrRequest
	SetXAttrResponse
	ShowFSRequest
	ShowFSResponse
	StatFSRequest
	StatFSResponse
	SymLinkRequest
	SymLinkResponse
	UpdateFSRequest
	UpdateFSResponse
	ModFS
	WriteRequest
	WriteResponse
	INodeEntry
	Attr
	DirEntry
	Tombstone
	FileBlock
	Dirty
*/
package formicproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CheckRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CheckRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *CheckRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *CheckRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CheckResponse struct {
	RPCID    uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Response string `protobuf:"bytes,2,opt,name=Response" json:"Response,omitempty"`
	Err      string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (m *CheckResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CheckResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *CheckResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *CheckResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type CreateFSRequest struct {
	RPCID  uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	FSName string `protobuf:"bytes,3,opt,name=FSName" json:"FSName,omitempty"`
}

func (m *CreateFSRequest) Reset()                    { *m = CreateFSRequest{} }
func (m *CreateFSRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFSRequest) ProtoMessage()               {}
func (*CreateFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateFSRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *CreateFSRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CreateFSRequest) GetFSName() string {
	if m != nil {
		return m.FSName
	}
	return ""
}

type CreateFSResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *CreateFSResponse) Reset()                    { *m = CreateFSResponse{} }
func (m *CreateFSResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateFSResponse) ProtoMessage()               {}
func (*CreateFSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateFSResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *CreateFSResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *CreateFSResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type CreateRequest struct {
	RPCID  uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=Parent" json:"Parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Attr   *Attr  `protobuf:"bytes,4,opt,name=Attr" json:"Attr,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *CreateRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

type CreateResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Attr  *Attr  `protobuf:"bytes,3,opt,name=Attr" json:"Attr,omitempty"`
	Err   string `protobuf:"bytes,4,opt,name=Err" json:"Err,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *CreateResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *CreateResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type DeleteFSRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	FSID  string `protobuf:"bytes,3,opt,name=FSID" json:"FSID,omitempty"`
}

func (m *DeleteFSRequest) Reset()                    { *m = DeleteFSRequest{} }
func (m *DeleteFSRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFSRequest) ProtoMessage()               {}
func (*DeleteFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteFSRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *DeleteFSRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DeleteFSRequest) GetFSID() string {
	if m != nil {
		return m.FSID
	}
	return ""
}

type DeleteFSResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *DeleteFSResponse) Reset()                    { *m = DeleteFSResponse{} }
func (m *DeleteFSResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteFSResponse) ProtoMessage()               {}
func (*DeleteFSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteFSResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *DeleteFSResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *DeleteFSResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetAttrRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
}

func (m *GetAttrRequest) Reset()                    { *m = GetAttrRequest{} }
func (m *GetAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAttrRequest) ProtoMessage()               {}
func (*GetAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetAttrRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *GetAttrRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

type GetAttrResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Attr  *Attr  `protobuf:"bytes,2,opt,name=Attr" json:"Attr,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *GetAttrResponse) Reset()                    { *m = GetAttrResponse{} }
func (m *GetAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAttrResponse) ProtoMessage()               {}
func (*GetAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetAttrResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *GetAttrResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *GetAttrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetXAttrRequest struct {
	RPCID    uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode    uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Size     uint32 `protobuf:"varint,4,opt,name=Size" json:"Size,omitempty"`
	Position uint32 `protobuf:"varint,5,opt,name=Position" json:"Position,omitempty"`
}

func (m *GetXAttrRequest) Reset()                    { *m = GetXAttrRequest{} }
func (m *GetXAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetXAttrRequest) ProtoMessage()               {}
func (*GetXAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetXAttrRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *GetXAttrRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *GetXAttrRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetXAttrRequest) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GetXAttrRequest) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type GetXAttrResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	XAttr []byte `protobuf:"bytes,2,opt,name=XAttr,proto3" json:"XAttr,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *GetXAttrResponse) Reset()                    { *m = GetXAttrResponse{} }
func (m *GetXAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetXAttrResponse) ProtoMessage()               {}
func (*GetXAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetXAttrResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *GetXAttrResponse) GetXAttr() []byte {
	if m != nil {
		return m.XAttr
	}
	return nil
}

func (m *GetXAttrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GrantAddrFSRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	FSID  string `protobuf:"bytes,3,opt,name=FSID" json:"FSID,omitempty"`
	Addr  string `protobuf:"bytes,4,opt,name=Addr" json:"Addr,omitempty"`
}

func (m *GrantAddrFSRequest) Reset()                    { *m = GrantAddrFSRequest{} }
func (m *GrantAddrFSRequest) String() string            { return proto.CompactTextString(m) }
func (*GrantAddrFSRequest) ProtoMessage()               {}
func (*GrantAddrFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GrantAddrFSRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *GrantAddrFSRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GrantAddrFSRequest) GetFSID() string {
	if m != nil {
		return m.FSID
	}
	return ""
}

func (m *GrantAddrFSRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type GrantAddrFSResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *GrantAddrFSResponse) Reset()                    { *m = GrantAddrFSResponse{} }
func (m *GrantAddrFSResponse) String() string            { return proto.CompactTextString(m) }
func (*GrantAddrFSResponse) ProtoMessage()               {}
func (*GrantAddrFSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GrantAddrFSResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *GrantAddrFSResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *GrantAddrFSResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type InitFSRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
}

func (m *InitFSRequest) Reset()                    { *m = InitFSRequest{} }
func (m *InitFSRequest) String() string            { return proto.CompactTextString(m) }
func (*InitFSRequest) ProtoMessage()               {}
func (*InitFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *InitFSRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

type InitFSResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *InitFSResponse) Reset()                    { *m = InitFSResponse{} }
func (m *InitFSResponse) String() string            { return proto.CompactTextString(m) }
func (*InitFSResponse) ProtoMessage()               {}
func (*InitFSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *InitFSResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *InitFSResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ListFSRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
}

func (m *ListFSRequest) Reset()                    { *m = ListFSRequest{} }
func (m *ListFSRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFSRequest) ProtoMessage()               {}
func (*ListFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ListFSRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ListFSRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ListFSResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *ListFSResponse) Reset()                    { *m = ListFSResponse{} }
func (m *ListFSResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFSResponse) ProtoMessage()               {}
func (*ListFSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ListFSResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ListFSResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ListFSResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ListXAttrRequest struct {
	RPCID    uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode    uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
	Size     uint32 `protobuf:"varint,3,opt,name=Size" json:"Size,omitempty"`
	Position uint32 `protobuf:"varint,4,opt,name=Position" json:"Position,omitempty"`
}

func (m *ListXAttrRequest) Reset()                    { *m = ListXAttrRequest{} }
func (m *ListXAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*ListXAttrRequest) ProtoMessage()               {}
func (*ListXAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ListXAttrRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ListXAttrRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *ListXAttrRequest) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ListXAttrRequest) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type ListXAttrResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	XAttr []byte `protobuf:"bytes,2,opt,name=XAttr,proto3" json:"XAttr,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *ListXAttrResponse) Reset()                    { *m = ListXAttrResponse{} }
func (m *ListXAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*ListXAttrResponse) ProtoMessage()               {}
func (*ListXAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ListXAttrResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ListXAttrResponse) GetXAttr() []byte {
	if m != nil {
		return m.XAttr
	}
	return nil
}

func (m *ListXAttrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type LookupRequest struct {
	RPCID  uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=Parent" json:"Parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *LookupRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *LookupRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *LookupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LookupResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Attr  *Attr  `protobuf:"bytes,3,opt,name=Attr" json:"Attr,omitempty"`
	Err   string `protobuf:"bytes,4,opt,name=Err" json:"Err,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *LookupResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *LookupResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LookupResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *LookupResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type MkDirRequest struct {
	RPCID  uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=Parent" json:"Parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Attr   *Attr  `protobuf:"bytes,4,opt,name=Attr" json:"Attr,omitempty"`
}

func (m *MkDirRequest) Reset()                    { *m = MkDirRequest{} }
func (m *MkDirRequest) String() string            { return proto.CompactTextString(m) }
func (*MkDirRequest) ProtoMessage()               {}
func (*MkDirRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *MkDirRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *MkDirRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *MkDirRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MkDirRequest) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

type MkDirResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Attr  *Attr  `protobuf:"bytes,3,opt,name=Attr" json:"Attr,omitempty"`
	Err   string `protobuf:"bytes,4,opt,name=Err" json:"Err,omitempty"`
}

func (m *MkDirResponse) Reset()                    { *m = MkDirResponse{} }
func (m *MkDirResponse) String() string            { return proto.CompactTextString(m) }
func (*MkDirResponse) ProtoMessage()               {}
func (*MkDirResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *MkDirResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *MkDirResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MkDirResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *MkDirResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ReadLinkRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
}

func (m *ReadLinkRequest) Reset()                    { *m = ReadLinkRequest{} }
func (m *ReadLinkRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadLinkRequest) ProtoMessage()               {}
func (*ReadLinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ReadLinkRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ReadLinkRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

type ReadLinkResponse struct {
	RPCID  uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=Target" json:"Target,omitempty"`
	Err    string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *ReadLinkResponse) Reset()                    { *m = ReadLinkResponse{} }
func (m *ReadLinkResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadLinkResponse) ProtoMessage()               {}
func (*ReadLinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ReadLinkResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ReadLinkResponse) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ReadLinkResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ReadDirAllRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
}

func (m *ReadDirAllRequest) Reset()                    { *m = ReadDirAllRequest{} }
func (m *ReadDirAllRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadDirAllRequest) ProtoMessage()               {}
func (*ReadDirAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ReadDirAllRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ReadDirAllRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

type ReadDirAllResponse struct {
	RPCID uint32           `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Ents  []*ReadDirAllEnt `protobuf:"bytes,2,rep,name=Ents" json:"Ents,omitempty"`
	Err   string           `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *ReadDirAllResponse) Reset()                    { *m = ReadDirAllResponse{} }
func (m *ReadDirAllResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadDirAllResponse) ProtoMessage()               {}
func (*ReadDirAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReadDirAllResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ReadDirAllResponse) GetEnts() []*ReadDirAllEnt {
	if m != nil {
		return m.Ents
	}
	return nil
}

func (m *ReadDirAllResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ReadDirAllEnt struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Type uint32 `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *ReadDirAllEnt) Reset()                    { *m = ReadDirAllEnt{} }
func (m *ReadDirAllEnt) String() string            { return proto.CompactTextString(m) }
func (*ReadDirAllEnt) ProtoMessage()               {}
func (*ReadDirAllEnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ReadDirAllEnt) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadDirAllEnt) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ReadRequest struct {
	RPCID  uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode  uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
	Offset int64  `protobuf:"varint,3,opt,name=Offset" json:"Offset,omitempty"`
	Size   int64  `protobuf:"varint,4,opt,name=Size" json:"Size,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ReadRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ReadRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *ReadRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ReadResponse struct {
	RPCID   uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Err     string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ReadResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ReadResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ReadResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type RemoveRequest struct {
	RPCID  uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=Parent" json:"Parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *RemoveRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *RemoveRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *RemoveRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RemoveResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *RemoveResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *RemoveResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type RemoveXAttrRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *RemoveXAttrRequest) Reset()                    { *m = RemoveXAttrRequest{} }
func (m *RemoveXAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveXAttrRequest) ProtoMessage()               {}
func (*RemoveXAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *RemoveXAttrRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *RemoveXAttrRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *RemoveXAttrRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RemoveXAttrResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *RemoveXAttrResponse) Reset()                    { *m = RemoveXAttrResponse{} }
func (m *RemoveXAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveXAttrResponse) ProtoMessage()               {}
func (*RemoveXAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *RemoveXAttrResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *RemoveXAttrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type RenameRequest struct {
	RPCID     uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	OldParent uint64 `protobuf:"varint,2,opt,name=OldParent" json:"OldParent,omitempty"`
	NewParent uint64 `protobuf:"varint,3,opt,name=NewParent" json:"NewParent,omitempty"`
	OldName   string `protobuf:"bytes,4,opt,name=OldName" json:"OldName,omitempty"`
	NewName   string `protobuf:"bytes,5,opt,name=NewName" json:"NewName,omitempty"`
}

func (m *RenameRequest) Reset()                    { *m = RenameRequest{} }
func (m *RenameRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameRequest) ProtoMessage()               {}
func (*RenameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *RenameRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *RenameRequest) GetOldParent() uint64 {
	if m != nil {
		return m.OldParent
	}
	return 0
}

func (m *RenameRequest) GetNewParent() uint64 {
	if m != nil {
		return m.NewParent
	}
	return 0
}

func (m *RenameRequest) GetOldName() string {
	if m != nil {
		return m.OldName
	}
	return ""
}

func (m *RenameRequest) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type RenameResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *RenameResponse) Reset()                    { *m = RenameResponse{} }
func (m *RenameResponse) String() string            { return proto.CompactTextString(m) }
func (*RenameResponse) ProtoMessage()               {}
func (*RenameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *RenameResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *RenameResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type RevokeAddrFSRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	FSID  string `protobuf:"bytes,3,opt,name=FSID" json:"FSID,omitempty"`
	Addr  string `protobuf:"bytes,4,opt,name=Addr" json:"Addr,omitempty"`
}

func (m *RevokeAddrFSRequest) Reset()                    { *m = RevokeAddrFSRequest{} }
func (m *RevokeAddrFSRequest) String() string            { return proto.CompactTextString(m) }
func (*RevokeAddrFSRequest) ProtoMessage()               {}
func (*RevokeAddrFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *RevokeAddrFSRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *RevokeAddrFSRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RevokeAddrFSRequest) GetFSID() string {
	if m != nil {
		return m.FSID
	}
	return ""
}

func (m *RevokeAddrFSRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type RevokeAddrFSResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *RevokeAddrFSResponse) Reset()                    { *m = RevokeAddrFSResponse{} }
func (m *RevokeAddrFSResponse) String() string            { return proto.CompactTextString(m) }
func (*RevokeAddrFSResponse) ProtoMessage()               {}
func (*RevokeAddrFSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *RevokeAddrFSResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *RevokeAddrFSResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *RevokeAddrFSResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type SetAttrRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Attr  *Attr  `protobuf:"bytes,2,opt,name=Attr" json:"Attr,omitempty"`
	Valid uint32 `protobuf:"varint,3,opt,name=Valid" json:"Valid,omitempty"`
}

func (m *SetAttrRequest) Reset()                    { *m = SetAttrRequest{} }
func (m *SetAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*SetAttrRequest) ProtoMessage()               {}
func (*SetAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *SetAttrRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *SetAttrRequest) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *SetAttrRequest) GetValid() uint32 {
	if m != nil {
		return m.Valid
	}
	return 0
}

type SetAttrResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Attr  *Attr  `protobuf:"bytes,2,opt,name=Attr" json:"Attr,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *SetAttrResponse) Reset()                    { *m = SetAttrResponse{} }
func (m *SetAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*SetAttrResponse) ProtoMessage()               {}
func (*SetAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *SetAttrResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *SetAttrResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *SetAttrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type SetXAttrRequest struct {
	RPCID    uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode    uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Value    []byte `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Position uint32 `protobuf:"varint,5,opt,name=Position" json:"Position,omitempty"`
	Flags    uint32 `protobuf:"varint,6,opt,name=Flags" json:"Flags,omitempty"`
}

func (m *SetXAttrRequest) Reset()                    { *m = SetXAttrRequest{} }
func (m *SetXAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*SetXAttrRequest) ProtoMessage()               {}
func (*SetXAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SetXAttrRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *SetXAttrRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *SetXAttrRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetXAttrRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SetXAttrRequest) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SetXAttrRequest) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type SetXAttrResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *SetXAttrResponse) Reset()                    { *m = SetXAttrResponse{} }
func (m *SetXAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*SetXAttrResponse) ProtoMessage()               {}
func (*SetXAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *SetXAttrResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *SetXAttrResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ShowFSRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	FSID  string `protobuf:"bytes,3,opt,name=FSID" json:"FSID,omitempty"`
}

func (m *ShowFSRequest) Reset()                    { *m = ShowFSRequest{} }
func (m *ShowFSRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowFSRequest) ProtoMessage()               {}
func (*ShowFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ShowFSRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ShowFSRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ShowFSRequest) GetFSID() string {
	if m != nil {
		return m.FSID
	}
	return ""
}

type ShowFSResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *ShowFSResponse) Reset()                    { *m = ShowFSResponse{} }
func (m *ShowFSResponse) String() string            { return proto.CompactTextString(m) }
func (*ShowFSResponse) ProtoMessage()               {}
func (*ShowFSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ShowFSResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *ShowFSResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ShowFSResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type StatFSRequest struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
}

func (m *StatFSRequest) Reset()                    { *m = StatFSRequest{} }
func (m *StatFSRequest) String() string            { return proto.CompactTextString(m) }
func (*StatFSRequest) ProtoMessage()               {}
func (*StatFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *StatFSRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

type StatFSResponse struct {
	RPCID   uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Blocks  uint64 `protobuf:"varint,2,opt,name=Blocks" json:"Blocks,omitempty"`
	BFree   uint64 `protobuf:"varint,3,opt,name=BFree" json:"BFree,omitempty"`
	BAvail  uint64 `protobuf:"varint,4,opt,name=BAvail" json:"BAvail,omitempty"`
	Files   uint64 `protobuf:"varint,5,opt,name=Files" json:"Files,omitempty"`
	FFree   uint64 `protobuf:"varint,6,opt,name=FFree" json:"FFree,omitempty"`
	BSize   uint32 `protobuf:"varint,7,opt,name=BSize" json:"BSize,omitempty"`
	NameLen uint32 `protobuf:"varint,8,opt,name=NameLen" json:"NameLen,omitempty"`
	FrSize  uint32 `protobuf:"varint,9,opt,name=FrSize" json:"FrSize,omitempty"`
	Err     string `protobuf:"bytes,10,opt,name=Err" json:"Err,omitempty"`
}

func (m *StatFSResponse) Reset()                    { *m = StatFSResponse{} }
func (m *StatFSResponse) String() string            { return proto.CompactTextString(m) }
func (*StatFSResponse) ProtoMessage()               {}
func (*StatFSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *StatFSResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *StatFSResponse) GetBlocks() uint64 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

func (m *StatFSResponse) GetBFree() uint64 {
	if m != nil {
		return m.BFree
	}
	return 0
}

func (m *StatFSResponse) GetBAvail() uint64 {
	if m != nil {
		return m.BAvail
	}
	return 0
}

func (m *StatFSResponse) GetFiles() uint64 {
	if m != nil {
		return m.Files
	}
	return 0
}

func (m *StatFSResponse) GetFFree() uint64 {
	if m != nil {
		return m.FFree
	}
	return 0
}

func (m *StatFSResponse) GetBSize() uint32 {
	if m != nil {
		return m.BSize
	}
	return 0
}

func (m *StatFSResponse) GetNameLen() uint32 {
	if m != nil {
		return m.NameLen
	}
	return 0
}

func (m *StatFSResponse) GetFrSize() uint32 {
	if m != nil {
		return m.FrSize
	}
	return 0
}

func (m *StatFSResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type SymLinkRequest struct {
	RPCID  uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=Parent" json:"Parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Target string `protobuf:"bytes,4,opt,name=Target" json:"Target,omitempty"`
	UID    uint32 `protobuf:"varint,5,opt,name=UID" json:"UID,omitempty"`
	GID    uint32 `protobuf:"varint,6,opt,name=GID" json:"GID,omitempty"`
}

func (m *SymLinkRequest) Reset()                    { *m = SymLinkRequest{} }
func (m *SymLinkRequest) String() string            { return proto.CompactTextString(m) }
func (*SymLinkRequest) ProtoMessage()               {}
func (*SymLinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *SymLinkRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *SymLinkRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *SymLinkRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SymLinkRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *SymLinkRequest) GetUID() uint32 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *SymLinkRequest) GetGID() uint32 {
	if m != nil {
		return m.GID
	}
	return 0
}

type SymLinkResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Attr  *Attr  `protobuf:"bytes,4,opt,name=Attr" json:"Attr,omitempty"`
	Err   string `protobuf:"bytes,5,opt,name=Err" json:"Err,omitempty"`
}

func (m *SymLinkResponse) Reset()                    { *m = SymLinkResponse{} }
func (m *SymLinkResponse) String() string            { return proto.CompactTextString(m) }
func (*SymLinkResponse) ProtoMessage()               {}
func (*SymLinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *SymLinkResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *SymLinkResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *SymLinkResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type UpdateFSRequest struct {
	RPCID   uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	FSID    string `protobuf:"bytes,3,opt,name=FSID" json:"FSID,omitempty"`
	FileSys *ModFS `protobuf:"bytes,4,opt,name=FileSys" json:"FileSys,omitempty"`
}

func (m *UpdateFSRequest) Reset()                    { *m = UpdateFSRequest{} }
func (m *UpdateFSRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateFSRequest) ProtoMessage()               {}
func (*UpdateFSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *UpdateFSRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *UpdateFSRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UpdateFSRequest) GetFSID() string {
	if m != nil {
		return m.FSID
	}
	return ""
}

func (m *UpdateFSRequest) GetFileSys() *ModFS {
	if m != nil {
		return m.FileSys
	}
	return nil
}

type UpdateFSResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	Err   string `protobuf:"bytes,3,opt,name=Err" json:"Err,omitempty"`
}

func (m *UpdateFSResponse) Reset()                    { *m = UpdateFSResponse{} }
func (m *UpdateFSResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateFSResponse) ProtoMessage()               {}
func (*UpdateFSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *UpdateFSResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *UpdateFSResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *UpdateFSResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ModFS struct {
	Name   string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *ModFS) Reset()                    { *m = ModFS{} }
func (m *ModFS) String() string            { return proto.CompactTextString(m) }
func (*ModFS) ProtoMessage()               {}
func (*ModFS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *ModFS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModFS) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type WriteRequest struct {
	RPCID   uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	INode   uint64 `protobuf:"varint,2,opt,name=INode" json:"INode,omitempty"`
	Offset  int64  `protobuf:"varint,3,opt,name=Offset" json:"Offset,omitempty"`
	Payload []byte `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *WriteRequest) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *WriteRequest) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *WriteRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *WriteRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type WriteResponse struct {
	RPCID uint32 `protobuf:"varint,1,opt,name=RPCID" json:"RPCID,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *WriteResponse) GetRPCID() uint32 {
	if m != nil {
		return m.RPCID
	}
	return 0
}

func (m *WriteResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type INodeEntry struct {
	Version   uint32            `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	IsDir     bool              `protobuf:"varint,2,opt,name=IsDir" json:"IsDir,omitempty"`
	Attr      *Attr             `protobuf:"bytes,3,opt,name=Attr" json:"Attr,omitempty"`
	Parent    uint64            `protobuf:"varint,4,opt,name=Parent" json:"Parent,omitempty"`
	INode     uint64            `protobuf:"varint,5,opt,name=INode" json:"INode,omitempty"`
	NodeCount uint64            `protobuf:"varint,6,opt,name=NodeCount" json:"NodeCount,omitempty"`
	IsLink    bool              `protobuf:"varint,7,opt,name=IsLink" json:"IsLink,omitempty"`
	Target    string            `protobuf:"bytes,8,opt,name=Target" json:"Target,omitempty"`
	XAttr     map[string][]byte `protobuf:"bytes,9,rep,name=XAttr" json:"XAttr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Blocks    uint64            `protobuf:"varint,10,opt,name=Blocks" json:"Blocks,omitempty"`
	BlockSize uint64            `protobuf:"varint,11,opt,name=BlockSize" json:"BlockSize,omitempty"`
	FSID      []byte            `protobuf:"bytes,13,opt,name=FSID,proto3" json:"FSID,omitempty"`
}

func (m *INodeEntry) Reset()                    { *m = INodeEntry{} }
func (m *INodeEntry) String() string            { return proto.CompactTextString(m) }
func (*INodeEntry) ProtoMessage()               {}
func (*INodeEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *INodeEntry) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *INodeEntry) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *INodeEntry) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *INodeEntry) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *INodeEntry) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *INodeEntry) GetNodeCount() uint64 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

func (m *INodeEntry) GetIsLink() bool {
	if m != nil {
		return m.IsLink
	}
	return false
}

func (m *INodeEntry) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *INodeEntry) GetXAttr() map[string][]byte {
	if m != nil {
		return m.XAttr
	}
	return nil
}

func (m *INodeEntry) GetBlocks() uint64 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

func (m *INodeEntry) GetBlockSize() uint64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *INodeEntry) GetFSID() []byte {
	if m != nil {
		return m.FSID
	}
	return nil
}

type Attr struct {
	INode  uint64 `protobuf:"varint,1,opt,name=INode" json:"INode,omitempty"`
	ATime  int64  `protobuf:"varint,2,opt,name=ATime" json:"ATime,omitempty"`
	MTime  int64  `protobuf:"varint,3,opt,name=MTime" json:"MTime,omitempty"`
	CTime  int64  `protobuf:"varint,4,opt,name=CTime" json:"CTime,omitempty"`
	CrTime int64  `protobuf:"varint,5,opt,name=CrTime" json:"CrTime,omitempty"`
	Mode   uint32 `protobuf:"varint,6,opt,name=Mode" json:"Mode,omitempty"`
	Valid  int32  `protobuf:"varint,7,opt,name=Valid" json:"Valid,omitempty"`
	Size   uint64 `protobuf:"varint,8,opt,name=Size" json:"Size,omitempty"`
	UID    uint32 `protobuf:"varint,9,opt,name=UID" json:"UID,omitempty"`
	GID    uint32 `protobuf:"varint,10,opt,name=GID" json:"GID,omitempty"`
}

func (m *Attr) Reset()                    { *m = Attr{} }
func (m *Attr) String() string            { return proto.CompactTextString(m) }
func (*Attr) ProtoMessage()               {}
func (*Attr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *Attr) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *Attr) GetATime() int64 {
	if m != nil {
		return m.ATime
	}
	return 0
}

func (m *Attr) GetMTime() int64 {
	if m != nil {
		return m.MTime
	}
	return 0
}

func (m *Attr) GetCTime() int64 {
	if m != nil {
		return m.CTime
	}
	return 0
}

func (m *Attr) GetCrTime() int64 {
	if m != nil {
		return m.CrTime
	}
	return 0
}

func (m *Attr) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Attr) GetValid() int32 {
	if m != nil {
		return m.Valid
	}
	return 0
}

func (m *Attr) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Attr) GetUID() uint32 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *Attr) GetGID() uint32 {
	if m != nil {
		return m.GID
	}
	return 0
}

type DirEntry struct {
	Version   uint32     `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	ID        []byte     `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	Tombstone *Tombstone `protobuf:"bytes,4,opt,name=Tombstone" json:"Tombstone,omitempty"`
	Type      uint32     `protobuf:"varint,5,opt,name=Type" json:"Type,omitempty"`
}

func (m *DirEntry) Reset()                    { *m = DirEntry{} }
func (m *DirEntry) String() string            { return proto.CompactTextString(m) }
func (*DirEntry) ProtoMessage()               {}
func (*DirEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *DirEntry) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DirEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DirEntry) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *DirEntry) GetTombstone() *Tombstone {
	if m != nil {
		return m.Tombstone
	}
	return nil
}

func (m *DirEntry) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type Tombstone struct {
	DTime  int64  `protobuf:"varint,1,opt,name=DTime" json:"DTime,omitempty"`
	QTime  int64  `protobuf:"varint,2,opt,name=QTime" json:"QTime,omitempty"`
	FSID   string `protobuf:"bytes,3,opt,name=FSID" json:"FSID,omitempty"`
	INode  uint64 `protobuf:"varint,4,opt,name=INode" json:"INode,omitempty"`
	Blocks uint64 `protobuf:"varint,5,opt,name=Blocks" json:"Blocks,omitempty"`
}

func (m *Tombstone) Reset()                    { *m = Tombstone{} }
func (m *Tombstone) String() string            { return proto.CompactTextString(m) }
func (*Tombstone) ProtoMessage()               {}
func (*Tombstone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *Tombstone) GetDTime() int64 {
	if m != nil {
		return m.DTime
	}
	return 0
}

func (m *Tombstone) GetQTime() int64 {
	if m != nil {
		return m.QTime
	}
	return 0
}

func (m *Tombstone) GetFSID() string {
	if m != nil {
		return m.FSID
	}
	return ""
}

func (m *Tombstone) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *Tombstone) GetBlocks() uint64 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

type FileBlock struct {
	Version  uint32 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Checksum uint32 `protobuf:"varint,3,opt,name=Checksum" json:"Checksum,omitempty"`
}

func (m *FileBlock) Reset()                    { *m = FileBlock{} }
func (m *FileBlock) String() string            { return proto.CompactTextString(m) }
func (*FileBlock) ProtoMessage()               {}
func (*FileBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *FileBlock) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *FileBlock) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileBlock) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

type Dirty struct {
	DTime  int64  `protobuf:"varint,1,opt,name=DTime" json:"DTime,omitempty"`
	QTime  int64  `protobuf:"varint,2,opt,name=QTime" json:"QTime,omitempty"`
	FSID   string `protobuf:"bytes,3,opt,name=FSID" json:"FSID,omitempty"`
	INode  uint64 `protobuf:"varint,4,opt,name=INode" json:"INode,omitempty"`
	Blocks uint64 `protobuf:"varint,5,opt,name=Blocks" json:"Blocks,omitempty"`
}

func (m *Dirty) Reset()                    { *m = Dirty{} }
func (m *Dirty) String() string            { return proto.CompactTextString(m) }
func (*Dirty) ProtoMessage()               {}
func (*Dirty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *Dirty) GetDTime() int64 {
	if m != nil {
		return m.DTime
	}
	return 0
}

func (m *Dirty) GetQTime() int64 {
	if m != nil {
		return m.QTime
	}
	return 0
}

func (m *Dirty) GetFSID() string {
	if m != nil {
		return m.FSID
	}
	return ""
}

func (m *Dirty) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *Dirty) GetBlocks() uint64 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

func init() {
	proto.RegisterType((*CheckRequest)(nil), "formicproto.CheckRequest")
	proto.RegisterType((*CheckResponse)(nil), "formicproto.CheckResponse")
	proto.RegisterType((*CreateFSRequest)(nil), "formicproto.CreateFSRequest")
	proto.RegisterType((*CreateFSResponse)(nil), "formicproto.CreateFSResponse")
	proto.RegisterType((*CreateRequest)(nil), "formicproto.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "formicproto.CreateResponse")
	proto.RegisterType((*DeleteFSRequest)(nil), "formicproto.DeleteFSRequest")
	proto.RegisterType((*DeleteFSResponse)(nil), "formicproto.DeleteFSResponse")
	proto.RegisterType((*GetAttrRequest)(nil), "formicproto.GetAttrRequest")
	proto.RegisterType((*GetAttrResponse)(nil), "formicproto.GetAttrResponse")
	proto.RegisterType((*GetXAttrRequest)(nil), "formicproto.GetXAttrRequest")
	proto.RegisterType((*GetXAttrResponse)(nil), "formicproto.GetXAttrResponse")
	proto.RegisterType((*GrantAddrFSRequest)(nil), "formicproto.GrantAddrFSRequest")
	proto.RegisterType((*GrantAddrFSResponse)(nil), "formicproto.GrantAddrFSResponse")
	proto.RegisterType((*InitFSRequest)(nil), "formicproto.InitFSRequest")
	proto.RegisterType((*InitFSResponse)(nil), "formicproto.InitFSResponse")
	proto.RegisterType((*ListFSRequest)(nil), "formicproto.ListFSRequest")
	proto.RegisterType((*ListFSResponse)(nil), "formicproto.ListFSResponse")
	proto.RegisterType((*ListXAttrRequest)(nil), "formicproto.ListXAttrRequest")
	proto.RegisterType((*ListXAttrResponse)(nil), "formicproto.ListXAttrResponse")
	proto.RegisterType((*LookupRequest)(nil), "formicproto.LookupRequest")
	proto.RegisterType((*LookupResponse)(nil), "formicproto.LookupResponse")
	proto.RegisterType((*MkDirRequest)(nil), "formicproto.MkDirRequest")
	proto.RegisterType((*MkDirResponse)(nil), "formicproto.MkDirResponse")
	proto.RegisterType((*ReadLinkRequest)(nil), "formicproto.ReadLinkRequest")
	proto.RegisterType((*ReadLinkResponse)(nil), "formicproto.ReadLinkResponse")
	proto.RegisterType((*ReadDirAllRequest)(nil), "formicproto.ReadDirAllRequest")
	proto.RegisterType((*ReadDirAllResponse)(nil), "formicproto.ReadDirAllResponse")
	proto.RegisterType((*ReadDirAllEnt)(nil), "formicproto.ReadDirAllEnt")
	proto.RegisterType((*ReadRequest)(nil), "formicproto.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "formicproto.ReadResponse")
	proto.RegisterType((*RemoveRequest)(nil), "formicproto.RemoveRequest")
	proto.RegisterType((*RemoveResponse)(nil), "formicproto.RemoveResponse")
	proto.RegisterType((*RemoveXAttrRequest)(nil), "formicproto.RemoveXAttrRequest")
	proto.RegisterType((*RemoveXAttrResponse)(nil), "formicproto.RemoveXAttrResponse")
	proto.RegisterType((*RenameRequest)(nil), "formicproto.RenameRequest")
	proto.RegisterType((*RenameResponse)(nil), "formicproto.RenameResponse")
	proto.RegisterType((*RevokeAddrFSRequest)(nil), "formicproto.RevokeAddrFSRequest")
	proto.RegisterType((*RevokeAddrFSResponse)(nil), "formicproto.RevokeAddrFSResponse")
	proto.RegisterType((*SetAttrRequest)(nil), "formicproto.SetAttrRequest")
	proto.RegisterType((*SetAttrResponse)(nil), "formicproto.SetAttrResponse")
	proto.RegisterType((*SetXAttrRequest)(nil), "formicproto.SetXAttrRequest")
	proto.RegisterType((*SetXAttrResponse)(nil), "formicproto.SetXAttrResponse")
	proto.RegisterType((*ShowFSRequest)(nil), "formicproto.ShowFSRequest")
	proto.RegisterType((*ShowFSResponse)(nil), "formicproto.ShowFSResponse")
	proto.RegisterType((*StatFSRequest)(nil), "formicproto.StatFSRequest")
	proto.RegisterType((*StatFSResponse)(nil), "formicproto.StatFSResponse")
	proto.RegisterType((*SymLinkRequest)(nil), "formicproto.SymLinkRequest")
	proto.RegisterType((*SymLinkResponse)(nil), "formicproto.SymLinkResponse")
	proto.RegisterType((*UpdateFSRequest)(nil), "formicproto.UpdateFSRequest")
	proto.RegisterType((*UpdateFSResponse)(nil), "formicproto.UpdateFSResponse")
	proto.RegisterType((*ModFS)(nil), "formicproto.ModFS")
	proto.RegisterType((*WriteRequest)(nil), "formicproto.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "formicproto.WriteResponse")
	proto.RegisterType((*INodeEntry)(nil), "formicproto.INodeEntry")
	proto.RegisterType((*Attr)(nil), "formicproto.Attr")
	proto.RegisterType((*DirEntry)(nil), "formicproto.DirEntry")
	proto.RegisterType((*Tombstone)(nil), "formicproto.Tombstone")
	proto.RegisterType((*FileBlock)(nil), "formicproto.FileBlock")
	proto.RegisterType((*Dirty)(nil), "formicproto.Dirty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Formic service

type FormicClient interface {
	Check(ctx context.Context, opts ...grpc.CallOption) (Formic_CheckClient, error)
	CreateFS(ctx context.Context, opts ...grpc.CallOption) (Formic_CreateFSClient, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (Formic_CreateClient, error)
	DeleteFS(ctx context.Context, opts ...grpc.CallOption) (Formic_DeleteFSClient, error)
	GetAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_GetAttrClient, error)
	GetXAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_GetXAttrClient, error)
	GrantAddrFS(ctx context.Context, opts ...grpc.CallOption) (Formic_GrantAddrFSClient, error)
	InitFS(ctx context.Context, opts ...grpc.CallOption) (Formic_InitFSClient, error)
	ListFS(ctx context.Context, opts ...grpc.CallOption) (Formic_ListFSClient, error)
	ListXAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_ListXAttrClient, error)
	Lookup(ctx context.Context, opts ...grpc.CallOption) (Formic_LookupClient, error)
	MkDir(ctx context.Context, opts ...grpc.CallOption) (Formic_MkDirClient, error)
	ReadDirAll(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadDirAllClient, error)
	ReadLink(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadLinkClient, error)
	Read(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadClient, error)
	Remove(ctx context.Context, opts ...grpc.CallOption) (Formic_RemoveClient, error)
	RemoveXAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_RemoveXAttrClient, error)
	Rename(ctx context.Context, opts ...grpc.CallOption) (Formic_RenameClient, error)
	RevokeAddrFS(ctx context.Context, opts ...grpc.CallOption) (Formic_RevokeAddrFSClient, error)
	SetAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_SetAttrClient, error)
	SetXAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_SetXAttrClient, error)
	ShowFS(ctx context.Context, opts ...grpc.CallOption) (Formic_ShowFSClient, error)
	StatFS(ctx context.Context, opts ...grpc.CallOption) (Formic_StatFSClient, error)
	SymLink(ctx context.Context, opts ...grpc.CallOption) (Formic_SymLinkClient, error)
	UpdateFS(ctx context.Context, opts ...grpc.CallOption) (Formic_UpdateFSClient, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Formic_WriteClient, error)
}

type formicClient struct {
	cc *grpc.ClientConn
}

func NewFormicClient(cc *grpc.ClientConn) FormicClient {
	return &formicClient{cc}
}

func (c *formicClient) Check(ctx context.Context, opts ...grpc.CallOption) (Formic_CheckClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[0], c.cc, "/formicproto.Formic/Check", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicCheckClient{stream}
	return x, nil
}

type Formic_CheckClient interface {
	Send(*CheckRequest) error
	Recv() (*CheckResponse, error)
	grpc.ClientStream
}

type formicCheckClient struct {
	grpc.ClientStream
}

func (x *formicCheckClient) Send(m *CheckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicCheckClient) Recv() (*CheckResponse, error) {
	m := new(CheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) CreateFS(ctx context.Context, opts ...grpc.CallOption) (Formic_CreateFSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[1], c.cc, "/formicproto.Formic/CreateFS", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicCreateFSClient{stream}
	return x, nil
}

type Formic_CreateFSClient interface {
	Send(*CreateFSRequest) error
	Recv() (*CreateFSResponse, error)
	grpc.ClientStream
}

type formicCreateFSClient struct {
	grpc.ClientStream
}

func (x *formicCreateFSClient) Send(m *CreateFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicCreateFSClient) Recv() (*CreateFSResponse, error) {
	m := new(CreateFSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Create(ctx context.Context, opts ...grpc.CallOption) (Formic_CreateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[2], c.cc, "/formicproto.Formic/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicCreateClient{stream}
	return x, nil
}

type Formic_CreateClient interface {
	Send(*CreateRequest) error
	Recv() (*CreateResponse, error)
	grpc.ClientStream
}

type formicCreateClient struct {
	grpc.ClientStream
}

func (x *formicCreateClient) Send(m *CreateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicCreateClient) Recv() (*CreateResponse, error) {
	m := new(CreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) DeleteFS(ctx context.Context, opts ...grpc.CallOption) (Formic_DeleteFSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[3], c.cc, "/formicproto.Formic/DeleteFS", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicDeleteFSClient{stream}
	return x, nil
}

type Formic_DeleteFSClient interface {
	Send(*DeleteFSRequest) error
	Recv() (*DeleteFSResponse, error)
	grpc.ClientStream
}

type formicDeleteFSClient struct {
	grpc.ClientStream
}

func (x *formicDeleteFSClient) Send(m *DeleteFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicDeleteFSClient) Recv() (*DeleteFSResponse, error) {
	m := new(DeleteFSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) GetAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_GetAttrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[4], c.cc, "/formicproto.Formic/GetAttr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicGetAttrClient{stream}
	return x, nil
}

type Formic_GetAttrClient interface {
	Send(*GetAttrRequest) error
	Recv() (*GetAttrResponse, error)
	grpc.ClientStream
}

type formicGetAttrClient struct {
	grpc.ClientStream
}

func (x *formicGetAttrClient) Send(m *GetAttrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicGetAttrClient) Recv() (*GetAttrResponse, error) {
	m := new(GetAttrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) GetXAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_GetXAttrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[5], c.cc, "/formicproto.Formic/GetXAttr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicGetXAttrClient{stream}
	return x, nil
}

type Formic_GetXAttrClient interface {
	Send(*GetXAttrRequest) error
	Recv() (*GetXAttrResponse, error)
	grpc.ClientStream
}

type formicGetXAttrClient struct {
	grpc.ClientStream
}

func (x *formicGetXAttrClient) Send(m *GetXAttrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicGetXAttrClient) Recv() (*GetXAttrResponse, error) {
	m := new(GetXAttrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) GrantAddrFS(ctx context.Context, opts ...grpc.CallOption) (Formic_GrantAddrFSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[6], c.cc, "/formicproto.Formic/GrantAddrFS", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicGrantAddrFSClient{stream}
	return x, nil
}

type Formic_GrantAddrFSClient interface {
	Send(*GrantAddrFSRequest) error
	Recv() (*GrantAddrFSResponse, error)
	grpc.ClientStream
}

type formicGrantAddrFSClient struct {
	grpc.ClientStream
}

func (x *formicGrantAddrFSClient) Send(m *GrantAddrFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicGrantAddrFSClient) Recv() (*GrantAddrFSResponse, error) {
	m := new(GrantAddrFSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) InitFS(ctx context.Context, opts ...grpc.CallOption) (Formic_InitFSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[7], c.cc, "/formicproto.Formic/InitFS", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicInitFSClient{stream}
	return x, nil
}

type Formic_InitFSClient interface {
	Send(*InitFSRequest) error
	Recv() (*InitFSResponse, error)
	grpc.ClientStream
}

type formicInitFSClient struct {
	grpc.ClientStream
}

func (x *formicInitFSClient) Send(m *InitFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicInitFSClient) Recv() (*InitFSResponse, error) {
	m := new(InitFSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) ListFS(ctx context.Context, opts ...grpc.CallOption) (Formic_ListFSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[8], c.cc, "/formicproto.Formic/ListFS", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicListFSClient{stream}
	return x, nil
}

type Formic_ListFSClient interface {
	Send(*ListFSRequest) error
	Recv() (*ListFSResponse, error)
	grpc.ClientStream
}

type formicListFSClient struct {
	grpc.ClientStream
}

func (x *formicListFSClient) Send(m *ListFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicListFSClient) Recv() (*ListFSResponse, error) {
	m := new(ListFSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) ListXAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_ListXAttrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[9], c.cc, "/formicproto.Formic/ListXAttr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicListXAttrClient{stream}
	return x, nil
}

type Formic_ListXAttrClient interface {
	Send(*ListXAttrRequest) error
	Recv() (*ListXAttrResponse, error)
	grpc.ClientStream
}

type formicListXAttrClient struct {
	grpc.ClientStream
}

func (x *formicListXAttrClient) Send(m *ListXAttrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicListXAttrClient) Recv() (*ListXAttrResponse, error) {
	m := new(ListXAttrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Lookup(ctx context.Context, opts ...grpc.CallOption) (Formic_LookupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[10], c.cc, "/formicproto.Formic/Lookup", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicLookupClient{stream}
	return x, nil
}

type Formic_LookupClient interface {
	Send(*LookupRequest) error
	Recv() (*LookupResponse, error)
	grpc.ClientStream
}

type formicLookupClient struct {
	grpc.ClientStream
}

func (x *formicLookupClient) Send(m *LookupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicLookupClient) Recv() (*LookupResponse, error) {
	m := new(LookupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) MkDir(ctx context.Context, opts ...grpc.CallOption) (Formic_MkDirClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[11], c.cc, "/formicproto.Formic/MkDir", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicMkDirClient{stream}
	return x, nil
}

type Formic_MkDirClient interface {
	Send(*MkDirRequest) error
	Recv() (*MkDirResponse, error)
	grpc.ClientStream
}

type formicMkDirClient struct {
	grpc.ClientStream
}

func (x *formicMkDirClient) Send(m *MkDirRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicMkDirClient) Recv() (*MkDirResponse, error) {
	m := new(MkDirResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) ReadDirAll(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadDirAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[12], c.cc, "/formicproto.Formic/ReadDirAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicReadDirAllClient{stream}
	return x, nil
}

type Formic_ReadDirAllClient interface {
	Send(*ReadDirAllRequest) error
	Recv() (*ReadDirAllResponse, error)
	grpc.ClientStream
}

type formicReadDirAllClient struct {
	grpc.ClientStream
}

func (x *formicReadDirAllClient) Send(m *ReadDirAllRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicReadDirAllClient) Recv() (*ReadDirAllResponse, error) {
	m := new(ReadDirAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) ReadLink(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadLinkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[13], c.cc, "/formicproto.Formic/ReadLink", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicReadLinkClient{stream}
	return x, nil
}

type Formic_ReadLinkClient interface {
	Send(*ReadLinkRequest) error
	Recv() (*ReadLinkResponse, error)
	grpc.ClientStream
}

type formicReadLinkClient struct {
	grpc.ClientStream
}

func (x *formicReadLinkClient) Send(m *ReadLinkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicReadLinkClient) Recv() (*ReadLinkResponse, error) {
	m := new(ReadLinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Read(ctx context.Context, opts ...grpc.CallOption) (Formic_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[14], c.cc, "/formicproto.Formic/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicReadClient{stream}
	return x, nil
}

type Formic_ReadClient interface {
	Send(*ReadRequest) error
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type formicReadClient struct {
	grpc.ClientStream
}

func (x *formicReadClient) Send(m *ReadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Remove(ctx context.Context, opts ...grpc.CallOption) (Formic_RemoveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[15], c.cc, "/formicproto.Formic/Remove", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicRemoveClient{stream}
	return x, nil
}

type Formic_RemoveClient interface {
	Send(*RemoveRequest) error
	Recv() (*RemoveResponse, error)
	grpc.ClientStream
}

type formicRemoveClient struct {
	grpc.ClientStream
}

func (x *formicRemoveClient) Send(m *RemoveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicRemoveClient) Recv() (*RemoveResponse, error) {
	m := new(RemoveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) RemoveXAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_RemoveXAttrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[16], c.cc, "/formicproto.Formic/RemoveXAttr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicRemoveXAttrClient{stream}
	return x, nil
}

type Formic_RemoveXAttrClient interface {
	Send(*RemoveXAttrRequest) error
	Recv() (*RemoveXAttrResponse, error)
	grpc.ClientStream
}

type formicRemoveXAttrClient struct {
	grpc.ClientStream
}

func (x *formicRemoveXAttrClient) Send(m *RemoveXAttrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicRemoveXAttrClient) Recv() (*RemoveXAttrResponse, error) {
	m := new(RemoveXAttrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Rename(ctx context.Context, opts ...grpc.CallOption) (Formic_RenameClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[17], c.cc, "/formicproto.Formic/Rename", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicRenameClient{stream}
	return x, nil
}

type Formic_RenameClient interface {
	Send(*RenameRequest) error
	Recv() (*RenameResponse, error)
	grpc.ClientStream
}

type formicRenameClient struct {
	grpc.ClientStream
}

func (x *formicRenameClient) Send(m *RenameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicRenameClient) Recv() (*RenameResponse, error) {
	m := new(RenameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) RevokeAddrFS(ctx context.Context, opts ...grpc.CallOption) (Formic_RevokeAddrFSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[18], c.cc, "/formicproto.Formic/RevokeAddrFS", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicRevokeAddrFSClient{stream}
	return x, nil
}

type Formic_RevokeAddrFSClient interface {
	Send(*RevokeAddrFSRequest) error
	Recv() (*RevokeAddrFSResponse, error)
	grpc.ClientStream
}

type formicRevokeAddrFSClient struct {
	grpc.ClientStream
}

func (x *formicRevokeAddrFSClient) Send(m *RevokeAddrFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicRevokeAddrFSClient) Recv() (*RevokeAddrFSResponse, error) {
	m := new(RevokeAddrFSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) SetAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_SetAttrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[19], c.cc, "/formicproto.Formic/SetAttr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicSetAttrClient{stream}
	return x, nil
}

type Formic_SetAttrClient interface {
	Send(*SetAttrRequest) error
	Recv() (*SetAttrResponse, error)
	grpc.ClientStream
}

type formicSetAttrClient struct {
	grpc.ClientStream
}

func (x *formicSetAttrClient) Send(m *SetAttrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicSetAttrClient) Recv() (*SetAttrResponse, error) {
	m := new(SetAttrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) SetXAttr(ctx context.Context, opts ...grpc.CallOption) (Formic_SetXAttrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[20], c.cc, "/formicproto.Formic/SetXAttr", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicSetXAttrClient{stream}
	return x, nil
}

type Formic_SetXAttrClient interface {
	Send(*SetXAttrRequest) error
	Recv() (*SetXAttrResponse, error)
	grpc.ClientStream
}

type formicSetXAttrClient struct {
	grpc.ClientStream
}

func (x *formicSetXAttrClient) Send(m *SetXAttrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicSetXAttrClient) Recv() (*SetXAttrResponse, error) {
	m := new(SetXAttrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) ShowFS(ctx context.Context, opts ...grpc.CallOption) (Formic_ShowFSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[21], c.cc, "/formicproto.Formic/ShowFS", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicShowFSClient{stream}
	return x, nil
}

type Formic_ShowFSClient interface {
	Send(*ShowFSRequest) error
	Recv() (*ShowFSResponse, error)
	grpc.ClientStream
}

type formicShowFSClient struct {
	grpc.ClientStream
}

func (x *formicShowFSClient) Send(m *ShowFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicShowFSClient) Recv() (*ShowFSResponse, error) {
	m := new(ShowFSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) StatFS(ctx context.Context, opts ...grpc.CallOption) (Formic_StatFSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[22], c.cc, "/formicproto.Formic/StatFS", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicStatFSClient{stream}
	return x, nil
}

type Formic_StatFSClient interface {
	Send(*StatFSRequest) error
	Recv() (*StatFSResponse, error)
	grpc.ClientStream
}

type formicStatFSClient struct {
	grpc.ClientStream
}

func (x *formicStatFSClient) Send(m *StatFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicStatFSClient) Recv() (*StatFSResponse, error) {
	m := new(StatFSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) SymLink(ctx context.Context, opts ...grpc.CallOption) (Formic_SymLinkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[23], c.cc, "/formicproto.Formic/SymLink", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicSymLinkClient{stream}
	return x, nil
}

type Formic_SymLinkClient interface {
	Send(*SymLinkRequest) error
	Recv() (*SymLinkResponse, error)
	grpc.ClientStream
}

type formicSymLinkClient struct {
	grpc.ClientStream
}

func (x *formicSymLinkClient) Send(m *SymLinkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicSymLinkClient) Recv() (*SymLinkResponse, error) {
	m := new(SymLinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) UpdateFS(ctx context.Context, opts ...grpc.CallOption) (Formic_UpdateFSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[24], c.cc, "/formicproto.Formic/UpdateFS", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicUpdateFSClient{stream}
	return x, nil
}

type Formic_UpdateFSClient interface {
	Send(*UpdateFSRequest) error
	Recv() (*UpdateFSResponse, error)
	grpc.ClientStream
}

type formicUpdateFSClient struct {
	grpc.ClientStream
}

func (x *formicUpdateFSClient) Send(m *UpdateFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicUpdateFSClient) Recv() (*UpdateFSResponse, error) {
	m := new(UpdateFSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *formicClient) Write(ctx context.Context, opts ...grpc.CallOption) (Formic_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Formic_serviceDesc.Streams[25], c.cc, "/formicproto.Formic/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &formicWriteClient{stream}
	return x, nil
}

type Formic_WriteClient interface {
	Send(*WriteRequest) error
	Recv() (*WriteResponse, error)
	grpc.ClientStream
}

type formicWriteClient struct {
	grpc.ClientStream
}

func (x *formicWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *formicWriteClient) Recv() (*WriteResponse, error) {
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Formic service

type FormicServer interface {
	Check(Formic_CheckServer) error
	CreateFS(Formic_CreateFSServer) error
	Create(Formic_CreateServer) error
	DeleteFS(Formic_DeleteFSServer) error
	GetAttr(Formic_GetAttrServer) error
	GetXAttr(Formic_GetXAttrServer) error
	GrantAddrFS(Formic_GrantAddrFSServer) error
	InitFS(Formic_InitFSServer) error
	ListFS(Formic_ListFSServer) error
	ListXAttr(Formic_ListXAttrServer) error
	Lookup(Formic_LookupServer) error
	MkDir(Formic_MkDirServer) error
	ReadDirAll(Formic_ReadDirAllServer) error
	ReadLink(Formic_ReadLinkServer) error
	Read(Formic_ReadServer) error
	Remove(Formic_RemoveServer) error
	RemoveXAttr(Formic_RemoveXAttrServer) error
	Rename(Formic_RenameServer) error
	RevokeAddrFS(Formic_RevokeAddrFSServer) error
	SetAttr(Formic_SetAttrServer) error
	SetXAttr(Formic_SetXAttrServer) error
	ShowFS(Formic_ShowFSServer) error
	StatFS(Formic_StatFSServer) error
	SymLink(Formic_SymLinkServer) error
	UpdateFS(Formic_UpdateFSServer) error
	Write(Formic_WriteServer) error
}

func RegisterFormicServer(s *grpc.Server, srv FormicServer) {
	s.RegisterService(&_Formic_serviceDesc, srv)
}

func _Formic_Check_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Check(&formicCheckServer{stream})
}

type Formic_CheckServer interface {
	Send(*CheckResponse) error
	Recv() (*CheckRequest, error)
	grpc.ServerStream
}

type formicCheckServer struct {
	grpc.ServerStream
}

func (x *formicCheckServer) Send(m *CheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicCheckServer) Recv() (*CheckRequest, error) {
	m := new(CheckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_CreateFS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).CreateFS(&formicCreateFSServer{stream})
}

type Formic_CreateFSServer interface {
	Send(*CreateFSResponse) error
	Recv() (*CreateFSRequest, error)
	grpc.ServerStream
}

type formicCreateFSServer struct {
	grpc.ServerStream
}

func (x *formicCreateFSServer) Send(m *CreateFSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicCreateFSServer) Recv() (*CreateFSRequest, error) {
	m := new(CreateFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Create(&formicCreateServer{stream})
}

type Formic_CreateServer interface {
	Send(*CreateResponse) error
	Recv() (*CreateRequest, error)
	grpc.ServerStream
}

type formicCreateServer struct {
	grpc.ServerStream
}

func (x *formicCreateServer) Send(m *CreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicCreateServer) Recv() (*CreateRequest, error) {
	m := new(CreateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_DeleteFS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).DeleteFS(&formicDeleteFSServer{stream})
}

type Formic_DeleteFSServer interface {
	Send(*DeleteFSResponse) error
	Recv() (*DeleteFSRequest, error)
	grpc.ServerStream
}

type formicDeleteFSServer struct {
	grpc.ServerStream
}

func (x *formicDeleteFSServer) Send(m *DeleteFSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicDeleteFSServer) Recv() (*DeleteFSRequest, error) {
	m := new(DeleteFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_GetAttr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).GetAttr(&formicGetAttrServer{stream})
}

type Formic_GetAttrServer interface {
	Send(*GetAttrResponse) error
	Recv() (*GetAttrRequest, error)
	grpc.ServerStream
}

type formicGetAttrServer struct {
	grpc.ServerStream
}

func (x *formicGetAttrServer) Send(m *GetAttrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicGetAttrServer) Recv() (*GetAttrRequest, error) {
	m := new(GetAttrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_GetXAttr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).GetXAttr(&formicGetXAttrServer{stream})
}

type Formic_GetXAttrServer interface {
	Send(*GetXAttrResponse) error
	Recv() (*GetXAttrRequest, error)
	grpc.ServerStream
}

type formicGetXAttrServer struct {
	grpc.ServerStream
}

func (x *formicGetXAttrServer) Send(m *GetXAttrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicGetXAttrServer) Recv() (*GetXAttrRequest, error) {
	m := new(GetXAttrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_GrantAddrFS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).GrantAddrFS(&formicGrantAddrFSServer{stream})
}

type Formic_GrantAddrFSServer interface {
	Send(*GrantAddrFSResponse) error
	Recv() (*GrantAddrFSRequest, error)
	grpc.ServerStream
}

type formicGrantAddrFSServer struct {
	grpc.ServerStream
}

func (x *formicGrantAddrFSServer) Send(m *GrantAddrFSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicGrantAddrFSServer) Recv() (*GrantAddrFSRequest, error) {
	m := new(GrantAddrFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_InitFS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).InitFS(&formicInitFSServer{stream})
}

type Formic_InitFSServer interface {
	Send(*InitFSResponse) error
	Recv() (*InitFSRequest, error)
	grpc.ServerStream
}

type formicInitFSServer struct {
	grpc.ServerStream
}

func (x *formicInitFSServer) Send(m *InitFSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicInitFSServer) Recv() (*InitFSRequest, error) {
	m := new(InitFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_ListFS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).ListFS(&formicListFSServer{stream})
}

type Formic_ListFSServer interface {
	Send(*ListFSResponse) error
	Recv() (*ListFSRequest, error)
	grpc.ServerStream
}

type formicListFSServer struct {
	grpc.ServerStream
}

func (x *formicListFSServer) Send(m *ListFSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicListFSServer) Recv() (*ListFSRequest, error) {
	m := new(ListFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_ListXAttr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).ListXAttr(&formicListXAttrServer{stream})
}

type Formic_ListXAttrServer interface {
	Send(*ListXAttrResponse) error
	Recv() (*ListXAttrRequest, error)
	grpc.ServerStream
}

type formicListXAttrServer struct {
	grpc.ServerStream
}

func (x *formicListXAttrServer) Send(m *ListXAttrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicListXAttrServer) Recv() (*ListXAttrRequest, error) {
	m := new(ListXAttrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Lookup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Lookup(&formicLookupServer{stream})
}

type Formic_LookupServer interface {
	Send(*LookupResponse) error
	Recv() (*LookupRequest, error)
	grpc.ServerStream
}

type formicLookupServer struct {
	grpc.ServerStream
}

func (x *formicLookupServer) Send(m *LookupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicLookupServer) Recv() (*LookupRequest, error) {
	m := new(LookupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_MkDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).MkDir(&formicMkDirServer{stream})
}

type Formic_MkDirServer interface {
	Send(*MkDirResponse) error
	Recv() (*MkDirRequest, error)
	grpc.ServerStream
}

type formicMkDirServer struct {
	grpc.ServerStream
}

func (x *formicMkDirServer) Send(m *MkDirResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicMkDirServer) Recv() (*MkDirRequest, error) {
	m := new(MkDirRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_ReadDirAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).ReadDirAll(&formicReadDirAllServer{stream})
}

type Formic_ReadDirAllServer interface {
	Send(*ReadDirAllResponse) error
	Recv() (*ReadDirAllRequest, error)
	grpc.ServerStream
}

type formicReadDirAllServer struct {
	grpc.ServerStream
}

func (x *formicReadDirAllServer) Send(m *ReadDirAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicReadDirAllServer) Recv() (*ReadDirAllRequest, error) {
	m := new(ReadDirAllRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_ReadLink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).ReadLink(&formicReadLinkServer{stream})
}

type Formic_ReadLinkServer interface {
	Send(*ReadLinkResponse) error
	Recv() (*ReadLinkRequest, error)
	grpc.ServerStream
}

type formicReadLinkServer struct {
	grpc.ServerStream
}

func (x *formicReadLinkServer) Send(m *ReadLinkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicReadLinkServer) Recv() (*ReadLinkRequest, error) {
	m := new(ReadLinkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Read(&formicReadServer{stream})
}

type Formic_ReadServer interface {
	Send(*ReadResponse) error
	Recv() (*ReadRequest, error)
	grpc.ServerStream
}

type formicReadServer struct {
	grpc.ServerStream
}

func (x *formicReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicReadServer) Recv() (*ReadRequest, error) {
	m := new(ReadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Remove_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Remove(&formicRemoveServer{stream})
}

type Formic_RemoveServer interface {
	Send(*RemoveResponse) error
	Recv() (*RemoveRequest, error)
	grpc.ServerStream
}

type formicRemoveServer struct {
	grpc.ServerStream
}

func (x *formicRemoveServer) Send(m *RemoveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicRemoveServer) Recv() (*RemoveRequest, error) {
	m := new(RemoveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_RemoveXAttr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).RemoveXAttr(&formicRemoveXAttrServer{stream})
}

type Formic_RemoveXAttrServer interface {
	Send(*RemoveXAttrResponse) error
	Recv() (*RemoveXAttrRequest, error)
	grpc.ServerStream
}

type formicRemoveXAttrServer struct {
	grpc.ServerStream
}

func (x *formicRemoveXAttrServer) Send(m *RemoveXAttrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicRemoveXAttrServer) Recv() (*RemoveXAttrRequest, error) {
	m := new(RemoveXAttrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Rename_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Rename(&formicRenameServer{stream})
}

type Formic_RenameServer interface {
	Send(*RenameResponse) error
	Recv() (*RenameRequest, error)
	grpc.ServerStream
}

type formicRenameServer struct {
	grpc.ServerStream
}

func (x *formicRenameServer) Send(m *RenameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicRenameServer) Recv() (*RenameRequest, error) {
	m := new(RenameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_RevokeAddrFS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).RevokeAddrFS(&formicRevokeAddrFSServer{stream})
}

type Formic_RevokeAddrFSServer interface {
	Send(*RevokeAddrFSResponse) error
	Recv() (*RevokeAddrFSRequest, error)
	grpc.ServerStream
}

type formicRevokeAddrFSServer struct {
	grpc.ServerStream
}

func (x *formicRevokeAddrFSServer) Send(m *RevokeAddrFSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicRevokeAddrFSServer) Recv() (*RevokeAddrFSRequest, error) {
	m := new(RevokeAddrFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_SetAttr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).SetAttr(&formicSetAttrServer{stream})
}

type Formic_SetAttrServer interface {
	Send(*SetAttrResponse) error
	Recv() (*SetAttrRequest, error)
	grpc.ServerStream
}

type formicSetAttrServer struct {
	grpc.ServerStream
}

func (x *formicSetAttrServer) Send(m *SetAttrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicSetAttrServer) Recv() (*SetAttrRequest, error) {
	m := new(SetAttrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_SetXAttr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).SetXAttr(&formicSetXAttrServer{stream})
}

type Formic_SetXAttrServer interface {
	Send(*SetXAttrResponse) error
	Recv() (*SetXAttrRequest, error)
	grpc.ServerStream
}

type formicSetXAttrServer struct {
	grpc.ServerStream
}

func (x *formicSetXAttrServer) Send(m *SetXAttrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicSetXAttrServer) Recv() (*SetXAttrRequest, error) {
	m := new(SetXAttrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_ShowFS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).ShowFS(&formicShowFSServer{stream})
}

type Formic_ShowFSServer interface {
	Send(*ShowFSResponse) error
	Recv() (*ShowFSRequest, error)
	grpc.ServerStream
}

type formicShowFSServer struct {
	grpc.ServerStream
}

func (x *formicShowFSServer) Send(m *ShowFSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicShowFSServer) Recv() (*ShowFSRequest, error) {
	m := new(ShowFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_StatFS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).StatFS(&formicStatFSServer{stream})
}

type Formic_StatFSServer interface {
	Send(*StatFSResponse) error
	Recv() (*StatFSRequest, error)
	grpc.ServerStream
}

type formicStatFSServer struct {
	grpc.ServerStream
}

func (x *formicStatFSServer) Send(m *StatFSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicStatFSServer) Recv() (*StatFSRequest, error) {
	m := new(StatFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_SymLink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).SymLink(&formicSymLinkServer{stream})
}

type Formic_SymLinkServer interface {
	Send(*SymLinkResponse) error
	Recv() (*SymLinkRequest, error)
	grpc.ServerStream
}

type formicSymLinkServer struct {
	grpc.ServerStream
}

func (x *formicSymLinkServer) Send(m *SymLinkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicSymLinkServer) Recv() (*SymLinkRequest, error) {
	m := new(SymLinkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_UpdateFS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).UpdateFS(&formicUpdateFSServer{stream})
}

type Formic_UpdateFSServer interface {
	Send(*UpdateFSResponse) error
	Recv() (*UpdateFSRequest, error)
	grpc.ServerStream
}

type formicUpdateFSServer struct {
	grpc.ServerStream
}

func (x *formicUpdateFSServer) Send(m *UpdateFSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicUpdateFSServer) Recv() (*UpdateFSRequest, error) {
	m := new(UpdateFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Formic_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FormicServer).Write(&formicWriteServer{stream})
}

type Formic_WriteServer interface {
	Send(*WriteResponse) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type formicWriteServer struct {
	grpc.ServerStream
}

func (x *formicWriteServer) Send(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *formicWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Formic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "formicproto.Formic",
	HandlerType: (*FormicServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Check",
			Handler:       _Formic_Check_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateFS",
			Handler:       _Formic_CreateFS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _Formic_Create_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteFS",
			Handler:       _Formic_DeleteFS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAttr",
			Handler:       _Formic_GetAttr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetXAttr",
			Handler:       _Formic_GetXAttr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GrantAddrFS",
			Handler:       _Formic_GrantAddrFS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InitFS",
			Handler:       _Formic_InitFS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListFS",
			Handler:       _Formic_ListFS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListXAttr",
			Handler:       _Formic_ListXAttr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Lookup",
			Handler:       _Formic_Lookup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MkDir",
			Handler:       _Formic_MkDir_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadDirAll",
			Handler:       _Formic_ReadDirAll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadLink",
			Handler:       _Formic_ReadLink_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _Formic_Read_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Remove",
			Handler:       _Formic_Remove_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RemoveXAttr",
			Handler:       _Formic_RemoveXAttr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Rename",
			Handler:       _Formic_Rename_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RevokeAddrFS",
			Handler:       _Formic_RevokeAddrFS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetAttr",
			Handler:       _Formic_SetAttr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetXAttr",
			Handler:       _Formic_SetXAttr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ShowFS",
			Handler:       _Formic_ShowFS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StatFS",
			Handler:       _Formic_StatFS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SymLink",
			Handler:       _Formic_SymLink_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateFS",
			Handler:       _Formic_UpdateFS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _Formic_Write_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "formic_api.proto",
}

func init() { proto.RegisterFile("formic_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x2e, 0x25, 0x52, 0x96, 0xc6, 0x92, 0xec, 0x30, 0x86, 0xa1, 0xa8, 0x4e, 0xe2, 0x12, 0x08,
	0xe0, 0x43, 0x61, 0x14, 0x49, 0x81, 0x1a, 0x69, 0x83, 0xc2, 0x31, 0x6d, 0x43, 0x85, 0x7f, 0x49,
	0x3b, 0x4d, 0x4f, 0x2d, 0x63, 0x6d, 0x12, 0xc2, 0x12, 0xe9, 0x92, 0xb4, 0x5d, 0xf5, 0x52, 0xf4,
	0x05, 0x7a, 0x28, 0xd0, 0x43, 0x0f, 0x7d, 0xac, 0x02, 0x7d, 0x8e, 0x3e, 0x41, 0xb1, 0xb3, 0xbb,
	0x24, 0x77, 0x45, 0x49, 0x96, 0xab, 0xf8, 0xb6, 0xb3, 0x3f, 0xdf, 0x7e, 0x3b, 0x3b, 0x3b, 0x3b,
	0x33, 0xb0, 0xf8, 0x36, 0x8c, 0xfa, 0xfe, 0xd9, 0xf7, 0xde, 0x85, 0xbf, 0x7e, 0x11, 0x85, 0x49,
	0x68, 0xce, 0xb3, 0x1e, 0x14, 0xac, 0x03, 0xa8, 0x6f, 0xbd, 0x27, 0x67, 0xe7, 0x0e, 0xf9, 0xf1,
	0x92, 0xc4, 0x89, 0xb9, 0x04, 0x86, 0x73, 0xb4, 0xd5, 0xb1, 0x5b, 0xda, 0xaa, 0xb6, 0xd6, 0x70,
	0x98, 0x40, 0x7b, 0x3b, 0x07, 0x61, 0x97, 0xb4, 0x4a, 0xab, 0xda, 0x9a, 0xee, 0x30, 0xc1, 0x34,
	0x41, 0x3f, 0xf0, 0xfa, 0xa4, 0x55, 0x5e, 0xd5, 0xd6, 0x6a, 0x0e, 0xb6, 0x2d, 0x17, 0x1a, 0x1c,
	0x2f, 0xbe, 0x08, 0x83, 0x98, 0x8c, 0x00, 0x6c, 0x43, 0x55, 0xcc, 0x40, 0xcc, 0x9a, 0x93, 0xca,
	0xe6, 0x22, 0x94, 0xb7, 0xa3, 0x88, 0xa3, 0xd2, 0xa6, 0x75, 0x0a, 0x0b, 0x5b, 0x11, 0xf1, 0x12,
	0xb2, 0xe3, 0x4e, 0xe4, 0x79, 0x12, 0x9e, 0x93, 0x80, 0x63, 0x32, 0xc1, 0x5c, 0x86, 0xca, 0x8e,
	0x9b, 0x63, 0xca, 0x25, 0xeb, 0x00, 0x16, 0x33, 0xd8, 0xb1, 0x74, 0x4d, 0xd0, 0x6d, 0x2f, 0xf1,
	0x38, 0x2c, 0xb6, 0x0b, 0x68, 0xfe, 0x04, 0x0d, 0x86, 0x37, 0x9e, 0xe4, 0x32, 0x54, 0x8e, 0xbc,
	0x88, 0x04, 0x09, 0xd7, 0x26, 0x97, 0x8a, 0xd4, 0x69, 0x3e, 0x01, 0x7d, 0x33, 0x49, 0xa2, 0x96,
	0xbe, 0xaa, 0xad, 0xcd, 0x3f, 0xbd, 0xb7, 0x9e, 0xbb, 0xba, 0x75, 0x3a, 0xe0, 0xe0, 0xb0, 0x15,
	0x43, 0x53, 0xec, 0x3c, 0xe9, 0x1c, 0xb8, 0x45, 0xa9, 0x60, 0x8b, 0xf2, 0xd8, 0x2d, 0xc4, 0x71,
	0xf5, 0xec, 0xb8, 0xc7, 0xb0, 0x60, 0x93, 0x1e, 0xb9, 0xed, 0xad, 0x98, 0xa0, 0xef, 0xb8, 0x1d,
	0x5b, 0x1c, 0x97, 0xb6, 0xe9, 0x8d, 0x64, 0x90, 0x33, 0xb8, 0x91, 0xaf, 0xa0, 0xb9, 0x4b, 0x12,
	0x3c, 0xc5, 0xf4, 0xf6, 0x6d, 0xfd, 0x00, 0x0b, 0xe9, 0xea, 0xb1, 0x64, 0x84, 0x0a, 0x4b, 0x37,
	0x52, 0x61, 0x8e, 0xdf, 0xaf, 0x1a, 0x6e, 0xf1, 0xfa, 0x96, 0x0c, 0x0b, 0x4d, 0xc6, 0x04, 0xdd,
	0xf5, 0x7f, 0x26, 0x78, 0x53, 0x0d, 0x07, 0xdb, 0xf4, 0xb9, 0x1d, 0x85, 0xb1, 0x9f, 0xf8, 0x61,
	0xd0, 0x32, 0xb0, 0x3f, 0x95, 0xad, 0x23, 0x58, 0xcc, 0x28, 0x8c, 0x3d, 0xe6, 0x12, 0x18, 0xaf,
	0xd3, 0x73, 0xd6, 0x1d, 0x26, 0x14, 0x9c, 0xea, 0x3d, 0x98, 0xbb, 0x91, 0x17, 0x24, 0x9b, 0xdd,
	0x6e, 0x34, 0x33, 0xdb, 0xa0, 0x7d, 0x14, 0x90, 0x5b, 0x20, 0xb6, 0xad, 0x63, 0xb8, 0x2f, 0xed,
	0x34, 0x03, 0x93, 0x79, 0x02, 0x8d, 0x4e, 0xe0, 0x27, 0x13, 0x78, 0x5b, 0x1b, 0xd0, 0x14, 0xd3,
	0xc6, 0x6e, 0xca, 0x37, 0x28, 0x65, 0x1b, 0x7c, 0x09, 0x8d, 0x3d, 0x3f, 0x4e, 0x6e, 0xa5, 0x18,
	0x6b, 0x0f, 0x9a, 0x62, 0xf1, 0x0c, 0xce, 0x1a, 0xc0, 0x22, 0x45, 0xfb, 0x3f, 0xe6, 0x87, 0xa6,
	0x56, 0x1e, 0x61, 0x6a, 0xba, 0x62, 0x6a, 0xc7, 0x70, 0x2f, 0xb7, 0xdf, 0x4c, 0x6c, 0xed, 0x18,
	0x1a, 0x7b, 0x61, 0x78, 0x7e, 0x79, 0x31, 0x33, 0x9f, 0x4b, 0x9d, 0xa9, 0x80, 0xbc, 0x3b, 0x67,
	0x7a, 0x0d, 0xf5, 0xfd, 0x73, 0xdb, 0x8f, 0xee, 0xfc, 0xeb, 0x88, 0xa0, 0xc1, 0x37, 0xbe, 0xbb,
	0xc3, 0xbe, 0x80, 0x05, 0x87, 0x78, 0xdd, 0x3d, 0x3f, 0xb8, 0x4d, 0xdc, 0x61, 0x39, 0xb0, 0x98,
	0x2d, 0x1f, 0xcb, 0x7a, 0x19, 0x2a, 0x27, 0x5e, 0xf4, 0x8e, 0x24, 0x9c, 0x37, 0x97, 0x0a, 0xec,
	0xe8, 0x6b, 0xb8, 0x47, 0x31, 0x6d, 0x3f, 0xda, 0xec, 0xf5, 0x6e, 0x43, 0xaa, 0x07, 0x66, 0x1e,
	0x60, 0x2c, 0xad, 0x75, 0xd0, 0xb7, 0x83, 0x24, 0x6e, 0x95, 0x56, 0xcb, 0x6b, 0xf3, 0x4f, 0xdb,
	0x92, 0xe2, 0x32, 0x90, 0xed, 0x20, 0x71, 0x70, 0x5e, 0x01, 0xdd, 0x2f, 0xa0, 0x21, 0x4d, 0x4c,
	0xef, 0x47, 0x93, 0x7f, 0x82, 0x93, 0xc1, 0x05, 0xe3, 0xd9, 0x70, 0xb0, 0x6d, 0x11, 0x98, 0xa7,
	0x0b, 0x6f, 0xf3, 0xda, 0x97, 0xa1, 0x72, 0xf8, 0xf6, 0x6d, 0x4c, 0x12, 0x24, 0x52, 0x76, 0xb8,
	0x24, 0x7d, 0x38, 0x65, 0xe6, 0x05, 0xac, 0x23, 0xa8, 0xb3, 0x6d, 0xc6, 0xea, 0xa1, 0x05, 0x73,
	0x47, 0xde, 0xa0, 0x17, 0x7a, 0x5d, 0xfe, 0xcc, 0x85, 0x58, 0xfc, 0xd0, 0x1d, 0xd2, 0x0f, 0xaf,
	0x66, 0x17, 0x5c, 0x51, 0x1f, 0x2e, 0x20, 0xa7, 0xf4, 0xe1, 0x27, 0xf4, 0xb2, 0xe9, 0xca, 0x59,
	0xfe, 0xdc, 0xd6, 0x0b, 0xb8, 0x2f, 0xa1, 0x4e, 0x49, 0xea, 0x0f, 0x8d, 0xaa, 0x28, 0xf0, 0xfa,
	0x13, 0x54, 0xb4, 0x02, 0xb5, 0xc3, 0x5e, 0x57, 0xd2, 0x52, 0xd6, 0x41, 0x47, 0x0f, 0xc8, 0x35,
	0x1f, 0x2d, 0xb3, 0xd1, 0xb4, 0x83, 0xde, 0xd8, 0x61, 0xaf, 0x8b, 0xcc, 0xd9, 0x7b, 0x16, 0x22,
	0x1d, 0x39, 0x20, 0xd7, 0x38, 0x62, 0xb0, 0x11, 0x2e, 0x32, 0x35, 0x33, 0x5a, 0x53, 0x9e, 0xc8,
	0xa7, 0x0a, 0xb9, 0x0a, 0xcf, 0xc9, 0x87, 0x8f, 0x24, 0x1c, 0x58, 0x92, 0xb7, 0x9a, 0xc1, 0xf7,
	0x7a, 0x06, 0x4d, 0xf7, 0x26, 0xd1, 0xe7, 0x0d, 0xc3, 0xc7, 0x25, 0x30, 0x5e, 0x79, 0x3d, 0xbf,
	0xcb, 0xbf, 0x5b, 0x26, 0xd0, 0x20, 0xd5, 0xfd, 0xb0, 0x41, 0xea, 0x9f, 0x1a, 0x6e, 0x31, 0xd3,
	0x20, 0x95, 0x9d, 0xe5, 0x92, 0x59, 0x51, 0xdd, 0x61, 0xc2, 0xb8, 0x30, 0x95, 0xae, 0xd8, 0xe9,
	0x79, 0xef, 0xe2, 0x56, 0x85, 0xed, 0x88, 0x82, 0xf5, 0x1c, 0x16, 0xdd, 0x9b, 0x05, 0xaf, 0xc3,
	0xd6, 0x75, 0x08, 0x0d, 0xf7, 0x7d, 0x78, 0x3d, 0xbb, 0xec, 0x65, 0x0f, 0x9a, 0x02, 0x70, 0x36,
	0x81, 0xa8, 0x9b, 0x78, 0x13, 0x03, 0xd1, 0x7f, 0x35, 0x68, 0x8a, 0x79, 0x93, 0xfe, 0xc2, 0x97,
	0xbd, 0xf0, 0xec, 0x3c, 0x16, 0x9e, 0x91, 0x49, 0x74, 0xf6, 0xcb, 0x9d, 0x88, 0x10, 0xfe, 0xd8,
	0x99, 0x80, 0xb3, 0x37, 0xaf, 0x3c, 0xbf, 0x87, 0x37, 0x44, 0x67, 0xa3, 0x84, 0xd7, 0xe0, 0xf7,
	0x48, 0x8c, 0xf7, 0xa3, 0x3b, 0x4c, 0xc0, 0x5e, 0xc4, 0xa8, 0xf0, 0x5e, 0xc4, 0xa0, 0xc8, 0xf8,
	0x33, 0xcc, 0x31, 0x1e, 0x28, 0xa0, 0xa3, 0xf0, 0xfa, 0x64, 0x8f, 0x04, 0xad, 0x2a, 0xf6, 0x0b,
	0x11, 0xf3, 0xf4, 0x08, 0x17, 0xd4, 0x70, 0x80, 0x4b, 0x42, 0x37, 0x90, 0xe9, 0xe6, 0x37, 0x7a,
	0xe8, 0x41, 0x7f, 0x72, 0x00, 0x31, 0x4d, 0xc0, 0x94, 0x05, 0x0b, 0xba, 0x1a, 0x2c, 0x9c, 0x76,
	0x6c, 0x6e, 0x90, 0xb4, 0x49, 0x7b, 0x76, 0x3b, 0x36, 0xb7, 0x44, 0xda, 0xc4, 0x57, 0x28, 0xf8,
	0xdc, 0xe8, 0x15, 0xea, 0x37, 0x7a, 0x85, 0x46, 0x76, 0xe4, 0x5f, 0x60, 0xe1, 0xf4, 0xa2, 0xeb,
	0xcd, 0x30, 0xdb, 0x36, 0x3f, 0x85, 0x39, 0x7a, 0x7d, 0xee, 0x20, 0xe6, 0x74, 0x4c, 0x89, 0xce,
	0x7e, 0xd8, 0xdd, 0x71, 0x1d, 0x31, 0x85, 0xe6, 0xe6, 0x19, 0x81, 0x19, 0xd8, 0xf7, 0x33, 0x30,
	0x70, 0x87, 0xc2, 0xd0, 0x65, 0x19, 0x2a, 0xd4, 0xa8, 0x2f, 0x63, 0x11, 0xb8, 0x31, 0xc9, 0xea,
	0x41, 0xfd, 0xdb, 0xc8, 0x9f, 0x54, 0x61, 0x99, 0x2e, 0x7e, 0xc9, 0x45, 0x21, 0xba, 0x14, 0x85,
	0xd0, 0x28, 0x8b, 0xef, 0x36, 0xa5, 0x6b, 0xf9, 0xab, 0x0c, 0x80, 0x9b, 0x6e, 0x07, 0x49, 0x34,
	0xa0, 0x3b, 0xbc, 0x22, 0x51, 0x4c, 0xdd, 0x1a, 0x5b, 0x28, 0x44, 0x64, 0x1a, 0xdb, 0x3e, 0x5b,
	0x5c, 0x75, 0x98, 0x70, 0xd3, 0xc0, 0x3a, 0x33, 0x6e, 0x5d, 0x32, 0xee, 0xf4, 0xf8, 0x46, 0xfe,
	0xf8, 0xf4, 0x63, 0x0f, 0xbb, 0x64, 0x2b, 0xbc, 0x0c, 0x12, 0xfe, 0x4e, 0xb3, 0x0e, 0x8a, 0xd5,
	0x89, 0xa9, 0xfd, 0xe2, 0x63, 0xad, 0x3a, 0x5c, 0xca, 0x3d, 0x8a, 0xaa, 0xf4, 0x28, 0x36, 0x44,
	0x7e, 0x56, 0xc3, 0x18, 0xd6, 0x92, 0x38, 0x66, 0x47, 0x5f, 0xc7, 0x49, 0xd8, 0x14, 0x39, 0x5c,
	0xe6, 0x87, 0x40, 0xf2, 0x43, 0x2b, 0x50, 0xc3, 0x16, 0x3a, 0x80, 0x79, 0xc6, 0x2f, 0xed, 0x48,
	0xed, 0xb7, 0x81, 0x37, 0x84, 0xed, 0xf6, 0x06, 0x40, 0x06, 0x4f, 0x6f, 0xe1, 0x9c, 0x0c, 0xb8,
	0x15, 0xd1, 0x26, 0xd5, 0xc3, 0x15, 0x7e, 0x32, 0x3c, 0x87, 0x44, 0xe1, 0x79, 0x69, 0x43, 0xb3,
	0xfe, 0xd1, 0x20, 0xfd, 0x53, 0x99, 0xaa, 0xb4, 0xbc, 0xaa, 0x96, 0xc0, 0xd8, 0x3c, 0xf1, 0x79,
	0xb6, 0x53, 0x76, 0x98, 0x40, 0x7b, 0xf7, 0xb1, 0x97, 0x99, 0x0f, 0x13, 0x68, 0xef, 0x16, 0xf6,
	0xb2, 0xf0, 0x97, 0x09, 0xf4, 0x90, 0x5b, 0x11, 0x76, 0x1b, 0xcc, 0xd6, 0x98, 0x44, 0x8f, 0xb1,
	0x4f, 0xb7, 0x63, 0xae, 0x03, 0xdb, 0xd9, 0xbf, 0x4e, 0x35, 0x6f, 0xf0, 0x7f, 0x3d, 0x8d, 0xaa,
	0xab, 0x48, 0x4c, 0x17, 0x8e, 0x90, 0x7a, 0xa2, 0xda, 0x90, 0x27, 0x82, 0xcc, 0x13, 0xfd, 0xae,
	0x41, 0xd5, 0xf6, 0xa3, 0x49, 0x86, 0x57, 0x94, 0xcf, 0x35, 0xa1, 0xc4, 0x3d, 0x44, 0xdd, 0x29,
	0x75, 0x6c, 0xf3, 0x73, 0xa8, 0x9d, 0x84, 0xfd, 0x37, 0x71, 0x12, 0x06, 0x84, 0x7b, 0x88, 0x65,
	0xe9, 0x9e, 0xd3, 0x51, 0x27, 0x9b, 0x98, 0x66, 0x1d, 0x46, 0x2e, 0xeb, 0x18, 0xe4, 0x90, 0xe8,
	0x79, 0x6d, 0x54, 0x8d, 0xc6, 0x34, 0x66, 0x0b, 0x3d, 0x1e, 0xe7, 0x75, 0x7e, 0x2c, 0xf4, 0x35,
	0xe4, 0xb6, 0xd2, 0x3b, 0xd3, 0x95, 0xd7, 0xcd, 0xcd, 0xca, 0xc8, 0x9b, 0x95, 0x75, 0x0a, 0x35,
	0xea, 0xc1, 0x50, 0x1a, 0xaf, 0x8f, 0xd4, 0x67, 0xd5, 0xb9, 0xcf, 0x6a, 0x43, 0x15, 0x6b, 0xd9,
	0xf1, 0x65, 0x9f, 0xc7, 0x5c, 0xa9, 0x6c, 0x5d, 0x82, 0x61, 0xfb, 0x51, 0x32, 0xb8, 0xdb, 0xd3,
	0x3c, 0xfd, 0x7b, 0x01, 0x2a, 0x3b, 0x78, 0x03, 0xa6, 0x0d, 0x06, 0xb2, 0x31, 0x1f, 0x48, 0x77,
	0x92, 0xaf, 0xe6, 0xb7, 0xdb, 0x45, 0x43, 0xcc, 0x97, 0x59, 0x1f, 0xad, 0x69, 0x9f, 0x69, 0xe6,
	0x3e, 0x54, 0x45, 0x0d, 0xdc, 0x5c, 0x91, 0x67, 0xcb, 0x15, 0xf7, 0xf6, 0xc3, 0x11, 0xa3, 0x12,
	0xdc, 0x2e, 0xb5, 0x7b, 0x3a, 0x62, 0xb6, 0x0b, 0xa6, 0x0b, 0xa8, 0x8f, 0x0b, 0xc7, 0x54, 0x5e,
	0xa2, 0x12, 0xac, 0xf0, 0x52, 0x6a, 0xce, 0x0a, 0x2f, 0xb5, 0x7c, 0xcc, 0xe1, 0xbe, 0x81, 0x39,
	0x5e, 0xca, 0x35, 0xe5, 0xcd, 0xe5, 0xf2, 0x70, 0x7b, 0xa5, 0x78, 0x50, 0xa5, 0x26, 0x0a, 0xa6,
	0xe6, 0xd0, 0xfc, 0x7c, 0x94, 0xac, 0x50, 0x53, 0xab, 0xac, 0x1c, 0xee, 0x15, 0xcc, 0xe7, 0x6a,
	0x98, 0xe6, 0x63, 0x79, 0xcd, 0x50, 0x1d, 0xb5, 0xbd, 0x3a, 0x7a, 0x82, 0x7a, 0x15, 0xac, 0x42,
	0xa9, 0x5c, 0x85, 0x54, 0xdd, 0x54, 0xae, 0x42, 0x2e, 0x69, 0x66, 0x40, 0xac, 0xe6, 0xa8, 0x00,
	0x49, 0x55, 0x4c, 0x05, 0x48, 0x2e, 0x52, 0x72, 0xa0, 0x23, 0xa8, 0xa5, 0xe5, 0x3f, 0xf3, 0xe1,
	0xd0, 0x7c, 0x49, 0x75, 0x8f, 0x46, 0x0d, 0x0f, 0x51, 0xc3, 0x52, 0x9d, 0x4a, 0x2d, 0x5f, 0x12,
	0x54, 0xa9, 0x49, 0xb5, 0x3d, 0x0e, 0x64, 0x83, 0x81, 0x55, 0x30, 0xe5, 0x31, 0xe5, 0x4b, 0x72,
	0xca, 0x63, 0x92, 0x8a, 0x66, 0x1c, 0xc5, 0x05, 0xc8, 0xaa, 0x32, 0xe6, 0xa3, 0x11, 0x75, 0x1d,
	0x81, 0xf7, 0x78, 0xe4, 0xb8, 0x6a, 0x6e, 0xa2, 0xda, 0xa5, 0x98, 0x9b, 0x52, 0x43, 0x53, 0xcc,
	0x4d, 0x2d, 0x91, 0x71, 0xb8, 0x4d, 0xd0, 0xe9, 0x88, 0xd9, 0x1a, 0x9a, 0x2c, 0x60, 0x1e, 0x14,
	0x8c, 0xa8, 0x5a, 0x67, 0x75, 0x0a, 0x53, 0x2d, 0x5d, 0xe5, 0xea, 0x33, 0x8a, 0xd6, 0xe5, 0x42,
	0x4b, 0x66, 0xfa, 0xb9, 0x82, 0x87, 0xf9, 0xb8, 0x60, 0x85, 0x64, 0x14, 0xab, 0xa3, 0x27, 0x0c,
	0x13, 0x0c, 0xe8, 0x97, 0xa6, 0x12, 0xcc, 0x55, 0x47, 0x86, 0x08, 0xe6, 0x4b, 0x14, 0x1c, 0xe8,
	0x3b, 0xa8, 0xe7, 0xab, 0x02, 0xa6, 0x4a, 0x60, 0xa8, 0x36, 0xd1, 0xfe, 0x64, 0xcc, 0x0c, 0xd5,
	0x23, 0xb9, 0x85, 0x1e, 0xc9, 0x1d, 0xe7, 0x91, 0xdc, 0x51, 0x1e, 0xc9, 0x2d, 0xf6, 0x48, 0xee,
	0x58, 0x8f, 0xe4, 0x92, 0x51, 0xaf, 0x8a, 0xe5, 0xb1, 0x8a, 0xfa, 0xa4, 0x6c, 0x59, 0x51, 0x9f,
	0x9c, 0xf8, 0xe6, 0x80, 0x30, 0x35, 0x55, 0x81, 0xf2, 0x79, 0xad, 0x0a, 0x24, 0xe5, 0xb2, 0x39,
	0x65, 0xb1, 0xf4, 0x4a, 0x55, 0x96, 0x94, 0x04, 0xaa, 0xca, 0x92, 0x33, 0xb2, 0x4c, 0x59, 0x22,
	0x8f, 0x51, 0x94, 0xa5, 0xe4, 0x57, 0x8a, 0xb2, 0xd4, 0xe4, 0x27, 0xf3, 0x1c, 0x98, 0x23, 0x28,
	0x9e, 0x23, 0x9f, 0xa5, 0x28, 0x9e, 0x43, 0x4a, 0x29, 0x18, 0xca, 0x9b, 0x0a, 0x0e, 0x3d, 0xfb,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xcb, 0x30, 0x7a, 0xae, 0x1f, 0x00, 0x00,
}
